<?xml version="1.0"?>
<Templates encode="utf8escenc"><Template Name="auto" Comments="0" Strings="0" Description="">auto [+var+] = [+value+];</Template><Template Name="bool" Description="" Comments="0" Strings="0">bool [+var+] = [+false+];</Template><Template Name="char" Description="" Comments="0" Strings="0">char [+var+][] = "[+value+]";</Template><Template Name="class">class [+className+] {&#xD;
	^&#xD;
};</Template><Template Name="const_cast" Description="" Comments="0" Strings="0">const_cast&lt;[+newtype+]&gt;([+expression+])</Template><Template Name="delete" Description="" Comments="0" Strings="0">delete [+var+];</Template><Template Name="do">do&#xD;
{&#xD;
	^&#xD;
}&#xD;
while([+evaluation+]);</Template><Template Name="dynamic_cast" Description="" Comments="0" Strings="0">dynamic_cast&lt;[+newtype+]&gt;([+expression+])</Template><Template Name="else">else &#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="elseif" Description="" Comments="0" Strings="0">else if ([+evaluation+])&#xD;&#xD;
{&#xD;&#xD;
	^&#xD;&#xD;
}</Template><Template Name="enum">enum [+name+] { [+values+] } [+objects+];</Template><Template Name="explicit">explicit [+className+]([+params+]);</Template><Template Name="extern">extern [+strliteral+] [+declaration+];</Template><Template Name="float">float [+var+] = [+number+];</Template><Template Name="for">for (int [+n+]=[+X+]; [+n+]&lt;[+Y+]; [+n+]++)&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="friend">friend [+className+];</Template><Template Name="function">[+type+] [+name+] ([+parameters+])&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="if" Comments="0" Strings="0">if ([+evaluation+]) &#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="include">#include "[+filename+]"</Template><Template Name="inline">inline [+type+] [+name+] ([+params+])&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="int">int [+var+] = [+integer+];</Template><Template Name="mutable">mutable [+type+] [+var+];</Template><Template Name="namespace">namespace [+nsName+]&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="operator">operator[+symbol+]([+params+]);</Template><Template Name="private">private:&#xD;
	[+members+];</Template><Template Name="protected">protected:&#xD;
	[+members+];</Template><Template Name="public">public:&#xD;
	[+members+];</Template><Template Name="reinterpret_cast">reinterpret_cast&lt;[+newtype+]&gt;([+expression+])</Template><Template Name="sizeof">sizeof([+char+])</Template><Template Name="static">static [+int+] [+n+]=[+val+]; </Template><Template Name="static_cast">static_cast&lt;[+newtype+]&gt;([+expression+])</Template><Template Name="struct">struct [+name+]&#xD;
{&#xD;
	[+memtype+] [+memname+];&#xD;
	^&#xD;
} [+object names+];</Template><Template Name="switch">switch ([+expression+])&#xD;
{&#xD;
	case [+value+]:&#xD;
		^ &#xD;
	break;&#xD;
	default:&#xD;
		&#xD;
}</Template><Template Name="template" Description="" Comments="0" Strings="0">template&lt;[+paramslist+]&gt; [+declaration+]</Template><Template Name="this" Description="" Comments="0" Strings="0">this-&gt;[+member+]</Template><Template Name="try" Description="" Comments="0" Strings="0">try&#xD;&#xD;
{&#xD;&#xD;
	^ // code to try&#xD;&#xD;
}&#xD;&#xD;
catch ([+type+] [+e+])&#xD;&#xD;
{&#xD;&#xD;
	// error handling&#xD;&#xD;
}</Template><Template Name="typedef">typedef [+type+] [+identifier+];</Template><Template Name="typeid" Description="" Comments="0" Strings="0">typeid([+type+])</Template><Template Name="typename">typename [+identifier+]</Template><Template Name="union" Description="" Comments="0" Strings="0">union [+tag+]&#xD;&#xD;
{&#xD;&#xD;
	[+memtype+] [+memname+];&#xD;&#xD;
	^&#xD;&#xD;
} [+objects+];&#xD;&#xD;
</Template><Template Name="using" Description="" Comments="0" Strings="0">using namespace [+nsName+];</Template><Template Name="uuid" Description="" Comments="0" Strings="0">uuid("[+guid+]")</Template><Template Name="virtual">virtual [+type+] [+name+];</Template><Template Name="void" Description="" Comments="0" Strings="0">void [+function+] ([+params+])&#xD;&#xD;
{&#xD;&#xD;
	^&#xD;&#xD;
}</Template><Template Name="volatile" Description="" Comments="0" Strings="0">volatile [+type+] [+var+];</Template><Template Name="whcar_t" Description="" Comments="0" Strings="0">wchar_t [+name+] = [+value+];</Template><Template Name="while" Description="" Comments="0" Strings="0">while ([+evaluation+]) {&#xD;&#xD;
	^ &#xD;&#xD;
}</Template><Template Name="hello" Description="" Comments="0" Strings="0">#include &lt;stdio.h&gt;&#xD;&#xD;
&#xD;&#xD;
void hello () {&#xD;&#xD;
	printf ("\nHello Deepak\n");&#xD;&#xD;
}&#xD;&#xD;
&#xD;&#xD;
&#xD;&#xD;
int main(int argc, char *argv[]) {&#xD;&#xD;
	hello();&#xD;&#xD;
}</Template></Templates>
