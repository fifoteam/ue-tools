<?xml version="1.0"?>
<Templates encode="utf8escenc">


<Template Name="module" Description="" Comments="0" Strings="0">//-------------------------------------------------------------------------------------------------&#xD;&#xD;
//  -- &#x7248;&#x6743;&#x6240;&#x6709;&#x8005;   : &#x4E2D;&#x56FD;&#x5927;&#x6052;&#xFF08;&#x96C6;&#x56E2;&#xFF09;&#x6709;&#x9650;&#x516C;&#x53F8;&#x5317;&#x4EAC;&#x56FE;&#x50CF;&#x89C6;&#x89C9;&#x6280;&#x672F;&#x5206;&#x516C;&#x53F8;, 2010 -2015.&#xD;&#xD;
//  -- &#x4FDD;&#x5BC6;&#x7EA7;&#x522B;     &#xFF1A;&#x7EDD;&#x5BC6;.&#xD;&#xD;
//  -- &#x90E8;&#x95E8;         : &#x786C;&#x4EF6;&#x90E8;&#xFF0C;FPGA&#x5DE5;&#x4F5C;&#x7EC4;&#xD;&#xD;
//  -- &#x6A21;&#x5757;&#x540D;       : [FILE_NAME]&#xD;&#xD;
//  -- &#x8BBE;&#x8BA1;&#x8005;       : &#x90A2;&#x6D77;&#x6D9B;&#xD;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;&#xD;
//&#xD;&#xD;
//  -- &#x7248;&#x672C;&#x8BB0;&#x5F55; :&#xD;&#xD;
//&#xD;&#xD;
//  -- &#x4F5C;&#x8005;         :| &#x7248;&#x672C;&#x53F7;	:| &#x4FEE;&#x6539;&#x65E5;&#x671F;				:|  &#x4FEE;&#x6539;&#x8BF4;&#x660E;&#xD;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;&#xD;
//  -- &#x90A2;&#x6D77;&#x6D9B;       :| V1.0		:| [DATE_USER]yyyy/MM/dd[DATE_USER_END] [TIME_USER]HH':'mm':'ss[TIME_USER_END]	:|  &#x521D;&#x59CB;&#x7248;&#x672C;&#xD;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;&#xD;
//&#xD;&#xD;
//  -- &#x6A21;&#x5757;&#x63CF;&#x8FF0;     : &#xD;&#xD;
//              1)  : &#xD;&#xD;
//&#xD;&#xD;
//              2)  : &#xD;&#xD;
//&#xD;&#xD;
//              3)  : &#xD;&#xD;
//&#xD;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;&#xD;
//`include			"[FILE_NAME]_def.v"&#xD;&#xD;
//&#x4EFF;&#x771F;&#x5355;&#x4F4D;/&#x7CBE;&#x5EA6;&#xD;&#xD;
`timescale 1ns/1ps&#xD;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;&#xD;
&#xD;&#xD;
module [FILE_NAME] # (&#xD;&#xD;
	parameter			REG_WD			= 32	,	//&#x5BC4;&#x5B58;&#x5668;&#x4F4D;&#x5BBD;&#xD;&#xD;
	parameter			TIME_INTERVAL	= 3600000	//&#x4E2D;&#x65AD;&#x95F4;&#x9694;&#xD;&#xD;
	)&#xD;&#xD;
	(&#xD;&#xD;
	//&#x8F93;&#x5165;&#x4FE1;&#x53F7;&#xD;&#xD;
	input					clk					,	//&#x8F93;&#x5165;&#x65F6;&#x949F;&#xD;&#xD;
	input					reset				,	//&#x590D;&#x4F4D;&#x4FE1;&#x53F7;&#xD;&#xD;
	);&#xD;&#xD;
	//	ref paramters&#xD;&#xD;
&#xD;&#xD;
&#xD;&#xD;
	//	ref functions&#xD;&#xD;
&#xD;&#xD;
&#xD;&#xD;
	//	ref signals&#xD;&#xD;
&#xD;&#xD;
&#xD;&#xD;
&#xD;&#xD;
&#xD;&#xD;
	//	ref ARCHITECTURE&#xD;&#xD;
&#xD;&#xD;
	//  ===============================================================================================&#xD;&#xD;
	//	ref ***create edge***&#xD;&#xD;
	//  ===============================================================================================&#xD;&#xD;
	//  -------------------------------------------------------------------------------------&#xD;&#xD;
	//	fval edge&#xD;&#xD;
	//  -------------------------------------------------------------------------------------&#xD;&#xD;
&#xD;&#xD;
&#xD;&#xD;
	//  ===============================================================================================&#xD;&#xD;
	//	ref ***output***&#xD;&#xD;
	//  ===============================================================================================&#xD;&#xD;
&#xD;&#xD;
&#xD;&#xD;
endmodule&#xD;&#xD;
</Template><Template Name="always" Description="" Comments="0" Strings="0">always @ (posedge [+clk+]) begin&#xD;
	if(^) begin&#xD;
		&#xD;
	end&#xD;
	else begin&#xD;
		&#xD;
	end&#xD;
end</Template><Template Name="add" Description="" Comments="0" Strings="0">[+sig+]	&lt;= [+sig+] + 1'b1;</Template><Template Name="if" Description="" Comments="0" Strings="0">if([+expr+]) begin&#xD;
	^&#xD;
end</Template>

<Template Name="else" Description="" Comments="0" Strings="0">else begin&#xD;
	^&#xD;
end</Template>

<Template Name="else if" Description="" Comments="0" Strings="0">else if([+expr+]) begin&#xD;
	^&#xD;
end</Template>



<Template Name="generate" Description="" Comments="0" Strings="0">genvar	[+i+];&#xD;
generate&#xD;
	^&#xD;
endgenerate</Template>

<Template Name="case" Description="" Comments="0" Strings="0">case(^)&#xD;
case1	: begin&#xD;
	&#xD;
end&#xD;
case2	: begin&#xD;
	&#xD;
end&#xD;
default	: begin&#xD;
	&#xD;
end&#xD;
endcase&#xD;
</Template>

<Template Name="for" Description="" Comments="0" Strings="0">for([+i+]=0;[+i+]&lt;[+limit+];[+i+]=[+i+]+1) begin&#xD;
	^&#xD;
end&#xD;
</Template>



<Template Name="function" Description="" Comments="0" Strings="0">function [[+upper+]:[+lower+]] [+output_name+];&#xD;
	input [+input_name+];&#xD;
	begin&#xD;
		^&#xD;
	end&#xD;
endfunction&#xD;
</Template>

<Template Name="repeat" Description="" Comments="0" Strings="0">repeat(^) @ (posedge clk);</Template>

<Template Name="wait" Description="" Comments="0" Strings="0">wait([+signal+]==[+value+]);&#xD;
</Template>
<Template Name="display" Description="" Comments="0" Strings="0">$display("%m: at time %t ERROR: fseek to %d failed", $time, offset);</Template>
<Template Name="monitor" Description="" Comments="0" Strings="0">$monitor ("time is %t,reg is %b",$time,a);&#xD;
</Template>
<Template Name="readmemh" Description="" Comments="0" Strings="0">$readmemh ("[+file_name+]",[+reg_name+],[+start_addr+],[+end_addr+]);&#xD;
</Template>


<Template Name="task" Description="" Comments="0" Strings="0">task task_name;&#xD;
	input	clk;&#xD;
	input	full;&#xD;
	reg	wr_reg;&#xD;
&#xD;
	begin&#xD;
		//repeat(30) @ (posedge clk);&#xD;
		//wait(full==1'b0);&#xD;
		//wr_reg	= 1'b1;&#xD;
		//@ (posedge);&#xD;
		//wr_reg	= 1'b0;&#xD;
	end&#xD;
endtask&#xD;
&#xD;
</Template><Template Name="forever" Description="" Comments="0" Strings="0">forever begin&#xD;
	//repeat(4) @ (posedge clk);&#xD;
	//#100;&#xD;
	//div_cnt	= div_cnt + 1'b1;&#xD;
end</Template><Template Name="repeat"/><Template Name="begin" Description="" Comments="0" Strings="0">begin&#xD;
	&#xD;
end</Template>

<Template Name="testbench" Description="" Comments="0" Strings="0">//-------------------------------------------------------------------------------------------------&#xD;
//  -- &#x7248;&#x6743;&#x6240;&#x6709;&#x8005;   : &#x4E2D;&#x56FD;&#x5927;&#x6052;&#xFF08;&#x96C6;&#x56E2;&#xFF09;&#x6709;&#x9650;&#x516C;&#x53F8;&#x5317;&#x4EAC;&#x56FE;&#x50CF;&#x89C6;&#x89C9;&#x6280;&#x672F;&#x5206;&#x516C;&#x53F8;, 2010 -2015.&#xD;
//  -- &#x4FDD;&#x5BC6;&#x7EA7;&#x522B;     &#xFF1A;&#x7EDD;&#x5BC6;.&#xD;
//  -- &#x90E8;&#x95E8;         : &#x786C;&#x4EF6;&#x90E8;&#xFF0C;FPGA&#x5DE5;&#x4F5C;&#x7EC4;&#xD;
//  -- &#x6A21;&#x5757;&#x540D;       : [FILE_NAME]&#xD;
//  -- &#x8BBE;&#x8BA1;&#x8005;       : &#x90A2;&#x6D77;&#x6D9B;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//&#xD;
//  -- &#x7248;&#x672C;&#x8BB0;&#x5F55; :&#xD;
//&#xD;
//  -- &#x4F5C;&#x8005;         :| &#x4FEE;&#x6539;&#x65E5;&#x671F;				:|  &#x4FEE;&#x6539;&#x8BF4;&#x660E;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//  -- &#x90A2;&#x6D77;&#x6D9B;       :| [DATE_USER]yyyy/MM/dd[DATE_USER_END] [TIME_USER]HH':'mm':'ss[TIME_USER_END]	:|  &#x521D;&#x59CB;&#x7248;&#x672C;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//&#xD;
//  -- &#x6A21;&#x5757;&#x63CF;&#x8FF0;     : &#xD;
//              1)  : &#xD;
//&#xD;
//              2)  : &#xD;
//&#xD;
//              3)  : &#xD;
//&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//`include			"[FILE_NAME]_def.v"&#xD;
//&#x4EFF;&#x771F;&#x5355;&#x4F4D;/&#x7CBE;&#x5EA6;&#xD;
`timescale 1ns/1ps&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
&#xD;
module [FILE_NAME] ();&#xD;
&#xD;
//	ref signals&#xD;
&#xD;
&#xD;
&#xD;
//	ref ARCHITECTURE&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
initial begin&#xD;
	 //$display($time, "Starting the Simulation...");&#xD;
	 //$monitor($time, "count1 is %d,count2 is %b,count3 is %h",cnt1,cnt2,cnt3);&#xD;
	 reset = 1'b1;&#xD;
	 #200&#xD;
	 reset = 1'b0;&#xD;
	 #10000&#xD;
	 $stop;&#xD;
&#xD;
end&#xD;
&#xD;
always #5 clk = ~clk;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
//generate vcd file&#xD;
//initial begin&#xD;
	 //$dumpfile("test.vcd");&#xD;
	 //$dumpvars(1,top_frame_buffer_inst);&#xD;
//end&#xD;
&#xD;
//for lattice simulation&#xD;
//GSR   GSR_INST (.GSR (1'b1)); //&lt; global reset sig&gt;&#xD;
//PUR   PUR_INST (.PUR (1'b1)); //&lt;powerup reset sig&gt;&#xD;
&#xD;
&#xD;
&#xD;
endmodule&#xD;
&#xD;
&#xD;
</Template><Template Name="fsm" Description="" Comments="0" Strings="0">&#xD;
//FSM Parameter Define&#xD;
parameter	S_IDLE		= 2'd0;&#xD;
parameter	S_S1		= 2'd1;&#xD;
parameter	S_S2		= 2'd2;&#xD;
parameter	S_S3		= 2'd3;&#xD;
&#xD;
reg		[1:0]	current_state	= S_IDLE;&#xD;
reg		[1:0]	next_state		= S_IDLE;&#xD;
&#xD;
//FSM for sim&#xD;
// synthesis translate_off&#xD;
reg		[127:0]			state_ascii;&#xD;
always @ ( * ) begin&#xD;
	case(current_state)&#xD;
		2'd0 	:	state_ascii	= "S_IDLE";&#xD;
		2'd1 	:	state_ascii	= "S_1";&#xD;
		2'd2 	:	state_ascii	= "S_2";&#xD;
		2'd3 	:	state_ascii	= "S_3";&#xD;
		default	:	state_ascii	= "ERROR";&#xD;
	endcase&#xD;
end&#xD;
// synthesis translate_on&#xD;
&#xD;
//	===============================================================================================&#xD;
//	ref ***FSM***&#xD;
//	===============================================================================================&#xD;
//	-------------------------------------------------------------------------------------&#xD;
//	FSM Sequential Logic&#xD;
//	-------------------------------------------------------------------------------------&#xD;
always @ (posedge clk) begin&#xD;
	if(reset) begin&#xD;
		current_state	&lt;= S_IDLE;&#xD;
	end&#xD;
	else begin&#xD;
		current_state	&lt;= next_state;&#xD;
	end&#xD;
end&#xD;
&#xD;
//	-------------------------------------------------------------------------------------&#xD;
//	FSM Conbinatial Logic&#xD;
//	-------------------------------------------------------------------------------------&#xD;
always @ ( * ) begin&#xD;
	case(current_state)&#xD;
		S_IDLE	:&#xD;
			next_state	= S_S1;&#xD;
		S_S1	:&#xD;
			next_state	= S_S2;&#xD;
		S_S2	:&#xD;
			next_state	= S_S3;&#xD;
		S_S3	:&#xD;
			next_state	= S_IDLE;&#xD;
		default	:&#xD;
			next_state	= S_IDLE;&#xD;
	endcase&#xD;
end&#xD;
&#xD;
//	-------------------------------------------------------------------------------------&#xD;
//	FSM Output Logic&#xD;
//	-------------------------------------------------------------------------------------&#xD;
always @ (posedge clk) begin&#xD;
	if(current_state==S_IDLE) begin&#xD;
		reg1	&lt;= 1'b0;&#xD;
	end&#xD;
	else if(input_port1==1'b1) begin&#xD;
		reg1	&lt;= reg1 + 1'b1;&#xD;
	end&#xD;
end&#xD;
&#xD;
always @ (posedge clk) begin&#xD;
	if(current_state==S_1) begin&#xD;
		reg2	&lt;= 1'b0;&#xD;
	end&#xD;
	else if(current_state==S_2) begin&#xD;
		reg2	&lt;= reg2 + 1'b1;&#xD;
	end&#xD;
end</Template><Template Name="edge" Description="" Comments="0" Strings="0">//asynchronous clock domain&#xD;
reg		[2:0]		[+sig+]_shift	= 3'b000;&#xD;
wire				[+sig+]_rise	;&#xD;
wire				[+sig+]_fall	;&#xD;
always @ (posedge clk) begin&#xD;
	[+sig+]_shift	&lt;= {[+sig+]_shift[1:0],i_[+sig+]};&#xD;
end&#xD;
assign	[+sig+]_rise	= ([+sig+]_shift[2:1]==2'b01) ? 1'b1 : 1'b0;&#xD;
assign	[+sig+]_fall	= ([+sig+]_shift[2:1]==2'b10) ? 1'b1 : 1'b0;&#xD;
&#xD;
//synchronous clock domain&#xD;
reg					[+sig+]_dly	= 1'b0;&#xD;
wire				[+sig+]_rise	;&#xD;
wire				[+sig+]_fall	;&#xD;
always @ (posedge clk) begin&#xD;
	[+sig+]_dly	&lt;= i_[+sig+];&#xD;
end&#xD;
assign	[+sig+]_rise	= ([+sig+]_dly==1'b0 &amp;&amp; i_[+sig+]==1'b1) ? 1'b1 : 1'b0;&#xD;
assign	[+sig+]_fall	= ([+sig+]_dly==1'b1 &amp;&amp; i_[+sig+]==1'b0) ? 1'b1 : 1'b0;&#xD;
&#xD;
//just delay&#xD;
reg		[1:0]		[+sig+]_shift	= 2'b00;&#xD;
always @ (posedge clk) begin&#xD;
	[+sig+]_shift	&lt;= {[+sig+]_shift[0],i_[+sig+]};&#xD;
end</Template><Template Name="bufg" Description="" Comments="0" Strings="0">//spartan6&#xD;
IBUFG ibufg_inst (&#xD;
.I	(I	),&#xD;
.O	(O	)&#xD;
);&#xD;
&#xD;
BUFG bufg_inst (&#xD;
.I	(I	),&#xD;
.O	(O	)&#xD;
);&#xD;
&#xD;
IBUFGDS # (&#xD;
.DIFF_TERM	("TRUE"	)	// TRUE or FALSE&#xD;
)&#xD;
ibufgds_inst (&#xD;
.I	(I	),&#xD;
.IB	(IB	),&#xD;
.O	(O	)&#xD;
);&#xD;
&#xD;
IBUFDS # (&#xD;
.DIFF_TERM	("TRUE"	)	// TRUE or FALSE&#xD;
)&#xD;
ibufgds_inst (&#xD;
.I	(I	),&#xD;
.IB	(IB	),&#xD;
.O	(O	)&#xD;
);&#xD;
&#xD;
OBUFDS obufds_inst (&#xD;
.I	(I	),&#xD;
.O	(O	),&#xD;
.OB	(OB	)&#xD;
);&#xD;
&#xD;
BUFGMUX # (&#xD;
.CLK_SEL_TYPE	("SYNC")  // Glitchles ("SYNC") or fast ("ASYNC") clock switch-over,&#xD;
)&#xD;
BUFGMUX_inst (&#xD;
.O		(O	),	// 1-bit output: Clock buffer output&#xD;
.I0		(I0	),	// 1-bit input: Clock buffer input (S=0)&#xD;
.I1		(I1	),	// 1-bit input: Clock buffer input (S=1)&#xD;
.S		(S	)	// 1-bit input: Clock buffer select&#xD;
);&#xD;
&#xD;
BUFGCE bufgce_inst (&#xD;
.I	(I	),	// 1-bit input: Clock buffer input (S=0)&#xD;
.CE	(CE	),	// 1-bit input: Clock buffer select&#xD;
.O	(O	)	// 1-bit output: Clock buffer output&#xD;
);</Template><Template Name="log2" Description="" Comments="0" Strings="0">//	-------------------------------------------------------------------------------------&#xD;
//	&#x53D6;&#x5BF9;&#x6570;&#xFF0C;&#x4E0A;&#x53D6;&#x6574;&#xD;
//	log2&#x53D6;&#x5BF9;&#x6570;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6709;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#x3002;&#x5206;&#x522B;&#x662F;&#x8BA1;&#x7B97;&#x8BA1;&#x6570;&#x5668;&#x7684;&#x4F4D;&#x5BBD;&#x548C;&#x8BA1;&#x7B97;&#x901A;&#x9053;&#x504F;&#x79FB;&#x7684;bit&#x6570;&#xD;
//	1.&#x8BA1;&#x7B97;&#x8BA1;&#x6570;&#x5668;&#x7684;&#x4F4D;&#x5BBD;&#xFF0C;&#x4F7F;&#x7528; y = log2(x+1)&#xFF0C;&#x5F53;x=2^^n&#x65F6;&#xFF0C;y=n+1&#xFF0C;&#x53EF;&#x4EE5;&#x8868;&#x793A;0-2^^(n+1)-1&#x7684;&#x6570;&#x503C;&#xD;
//	2.&#x8BA1;&#x7B97;&#x901A;&#x9053;&#x504F;&#x79FB;&#x7684;bit&#x6570;&#xFF0C;&#x4F7F;&#x7528; y = log2(x)&#xFF0C;&#x5F53;x=2^^n&#x65F6;&#xFF0C;y=n&#xFF0C;&#x53EF;&#x4EE5;&#x8868;&#x793A;0-2^^n-1&#x7684;&#x6570;&#x503C;&#xD;
//	-------------------------------------------------------------------------------------&#xD;
function integer log2 (input integer xx);&#xD;
	integer x;&#xD;
	begin&#xD;
		x	= xx-1 ;&#xD;
		for (log2=0;x&gt;0;log2=log2+1) begin&#xD;
			x	= x &gt;&gt; 1;&#xD;
		end&#xD;
	end&#xD;
endfunction</Template><Template Name="com" Description="" Comments="0" Strings="0">//	-------------------------------------------------------------------------------------&#xD;
//	^&#xD;
//	-------------------------------------------------------------------------------------</Template><Template Name="comd" Description="" Comments="0" Strings="0">//	===============================================================================================&#xD;
//	^&#xD;
//	===============================================================================================&#xD;
//	-------------------------------------------------------------------------------------&#xD;
//&#xD;
//	-------------------------------------------------------------------------------------</Template><Template Name="initial" Description="" Comments="0" Strings="0">initial begin&#xD;
	//$display($time, "Starting the Simulation...");&#xD;
	//$monitor($time, "count1 is %d,count2 is %b,count3 is %h",cnt1,cnt2,cnt3);&#xD;
	reset = 1'b1;&#xD;
	#200&#xD;
	reset = 1'b0;&#xD;
	#10000&#xD;
	$stop;&#xD;
&#xD;
end</Template><Template Name="init" Description="" Comments="0" Strings="0">&lt;= [+1+]'b0;</Template><Template Name="oddr2" Description="" Comments="0" Strings="0">ODDR2 # (&#xD;
.DDR_ALIGNMENT	("C0"			),	// Sets output alignment to "NONE", "C0" or "C1"&#xD;
.INIT			(1'b0			),  // Sets initial state of the Q output to 1'b0 or 1'b1&#xD;
.SRTYPE			("ASYNC"		)	// Specifies "SYNC" or "ASYNC" set/reset&#xD;
)&#xD;
ODDR2_txc_inst (&#xD;
.Q				(src_clk_odelay	),&#xD;
.C0				(!src_clk		),&#xD;
.C1				(src_clk		),&#xD;
.CE				(1'b1			),&#xD;
.D0				(1'b1			),&#xD;
.D1				(1'b0			),&#xD;
.R				(1'b0			),&#xD;
.S				(1'b0			)&#xD;
);&#xD;
</Template><Template Name="iodelay2" Description="" Comments="0" Strings="0">IODELAY2 # (&#xD;
.IDELAY_TYPE      	("FIXED"		),	// "FIXED", "DEFAULT", "VARIABLE_FROM_ZERO", "VARIABLE_FROM_HALF_MAX" or "DIFF_PHASE_DETECTOR"&#xD;
.ODELAY_VALUE     	(0				),	// Amount of taps fixed output delay (0-255)&#xD;
.DELAY_SRC        	("ODATAIN"		),	// "IO", "ODATAIN" or "IDATAIN"&#xD;
.SIM_TAPDELAY_VALUE	(75				)	// Per tap delay used for simulation in ps&#xD;
)&#xD;
delay_txc_inst (&#xD;
.BUSY			(				),&#xD;
.DATAOUT		(				),&#xD;
.DATAOUT2		(				),&#xD;
.DOUT			(o_tx_clk		),&#xD;
.TOUT			(				),&#xD;
.CAL			(1'b0			),&#xD;
.CE				(1'b0			),&#xD;
.CLK			(1'b0			),&#xD;
.IDATAIN		(1'b0			),&#xD;
.INC			(1'b0			),&#xD;
.IOCLK0			(1'b0			),&#xD;
.IOCLK1			(1'b0			),&#xD;
.ODATAIN		(src_clk_odelay	),&#xD;
.RST			(1'b0			),&#xD;
.T				(1'b0			)&#xD;
);</Template><Template Name="lfsr" Description="" Comments="0" Strings="0">reg		[[+n+]-1:0]	lfsr_shift 	= [+n+]'hab;&#xD;
wire			lfsr_seed	;&#xD;
&#xD;
always @ (posedge clk) begin&#xD;
	lfsr_shift	&lt;= {lfsr_shift[[+n+]-2:0],lfsr_seed};&#xD;
end&#xD;
assign	lfsr_seed	= lfsr_shift[1] ^^ lfsr_shift[2] ^^ lfsr_shift[4];</Template><Template Name="dcm" Description="" Comments="0" Strings="0">//-------------------------------------------------------------------------------------------------&#xD;
//  -- &#x7248;&#x6743;&#x6240;&#x6709;&#x8005;   : &#x4E2D;&#x56FD;&#x5927;&#x6052;&#xFF08;&#x96C6;&#x56E2;&#xFF09;&#x6709;&#x9650;&#x516C;&#x53F8;&#x5317;&#x4EAC;&#x56FE;&#x50CF;&#x89C6;&#x89C9;&#x6280;&#x672F;&#x5206;&#x516C;&#x53F8;, 2010 -2015.&#xD;
//  -- &#x4FDD;&#x5BC6;&#x7EA7;&#x522B;     &#xFF1A;&#x7EDD;&#x5BC6;.&#xD;
//  -- &#x90E8;&#x95E8;         : &#x786C;&#x4EF6;&#x90E8;&#xFF0C;FPGA&#x5DE5;&#x4F5C;&#x7EC4;&#xD;
//  -- &#x6A21;&#x5757;&#x540D;       : [FILE_NAME]&#xD;
//  -- &#x8BBE;&#x8BA1;&#x8005;       : &#x90A2;&#x6D77;&#x6D9B;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//&#xD;
//  -- &#x7248;&#x672C;&#x8BB0;&#x5F55; :&#xD;
//&#xD;
//  -- &#x4F5C;&#x8005;         :| &#x4FEE;&#x6539;&#x65E5;&#x671F;				:|  &#x4FEE;&#x6539;&#x8BF4;&#x660E;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//  -- &#x90A2;&#x6D77;&#x6D9B;       :| [DATE_USER]yyyy/MM/dd[DATE_USER_END] [TIME_USER]HH':'mm':'ss[TIME_USER_END]	:|  &#x521D;&#x59CB;&#x7248;&#x672C;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//&#xD;
//  -- &#x6A21;&#x5757;&#x63CF;&#x8FF0;     :&#xD;
//              1)  : ... ...&#xD;
//&#xD;
//              2)  : ... ...&#xD;
//&#xD;
//              3)  : ... ...&#xD;
//&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//&#x4EFF;&#x771F;&#x5355;&#x4F4D;/&#x7CBE;&#x5EA6;&#xD;
`timescale 1ns/1ps&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
&#xD;
module [FILE_NAME] (&#xD;
	input         clk_in		,&#xD;
	input         dcm_reset		,&#xD;
	output        clk_fx_out	,&#xD;
	output        locked&#xD;
	);&#xD;
&#xD;
&#xD;
	wire 		[7:0]  	status_int		;&#xD;
	wire 				clkfb			;&#xD;
	wire 				clk0			;&#xD;
	wire 				clkfx			;&#xD;
&#xD;
&#xD;
	//	ref signals&#xD;
&#xD;
	//	ref ARCHITECTURE&#xD;
&#xD;
//  -------------------------------------------------------------------------------------&#xD;
//	dcm &#x4F8B;&#x5316;&#xD;
//  -------------------------------------------------------------------------------------&#xD;
	DCM_SP # (&#xD;
	.CLKDV_DIVIDE          (2.000				),&#xD;
	.CLKFX_DIVIDE          (5					),&#xD;
	.CLKFX_MULTIPLY        (12					),&#xD;
	.CLKIN_DIVIDE_BY_2     ("FALSE"				),&#xD;
	.CLKIN_PERIOD          (25.0				),&#xD;
	.CLKOUT_PHASE_SHIFT    ("NONE"				),&#xD;
	.CLK_FEEDBACK          ("1X"				),&#xD;
	.DESKEW_ADJUST         ("SYSTEM_SYNCHRONOUS"),&#xD;
	.PHASE_SHIFT           (0					),&#xD;
	.STARTUP_WAIT          ("FALSE"				)&#xD;
	)&#xD;
	dcm_sp_inst (&#xD;
	// Input clocks&#xD;
	.CLKIN                 (clk_in	),&#xD;
	.CLKFB                 (clkfb	),&#xD;
	// Output clocks&#xD;
	.CLK0                  (clk0	),&#xD;
	.CLK90                 (),&#xD;
	.CLK180                (),&#xD;
	.CLK270                (),&#xD;
	.CLK2X                 (),&#xD;
	.CLK2X180              (),&#xD;
	.CLKFX                 (clkfx	),&#xD;
	.CLKFX180              (),&#xD;
	.CLKDV                 (),&#xD;
	// Ports for dynamic phase shift&#xD;
	.PSCLK                 (1'b0	),&#xD;
	.PSEN                  (1'b0	),&#xD;
	.PSINCDEC              (1'b0	),&#xD;
	.PSDONE                (),&#xD;
	// Other control and status signals&#xD;
	.LOCKED                (locked		),&#xD;
	.STATUS                (status_int	),&#xD;
	.RST                   (dcm_reset	),&#xD;
	// Unused pin- tie low&#xD;
	.DSSEN                 (1'b0		)&#xD;
	);&#xD;
&#xD;
	&#xD;
&#xD;
//  -------------------------------------------------------------------------------------&#xD;
//	&#x65F6;&#x949F;&#xD;
//  -------------------------------------------------------------------------------------&#xD;
	BUFG clkf_buf (&#xD;
	.I		(clk0	),&#xD;
	.O		(clkfb	)&#xD;
	);&#xD;
&#xD;
	BUFG clkout1_buf (&#xD;
	.I		(clkfx		),&#xD;
	.O		(clk_fx_out	)&#xD;
	);&#xD;
&#xD;
&#xD;
&#xD;
endmodule</Template><Template Name="pull" Description="" Comments="0" Strings="0">PULLDOWN pulldown_[+sig+]_inst (.O([+sig+]));&#xD;
PULLUP pullup_[+sig+]_inst (.O([+sig+]));</Template><Template Name="timing" Description="" Comments="0" Strings="0">	//	-------------------------------------------------------------------------------------&#xD;
	//&#xD;
	//	clk&#xD;
	//                        _________________________________________________&#xD;
	//	i_lval_delay         _|                                               |______________________&#xD;
	//                            _________________________________________________&#xD;
	//	lval_delay_dly0      _____|                                               |__________________&#xD;
	//                                _________________________________________________&#xD;
	//	lval_delay_dly1      _________|                                               |______________&#xD;
	//                                    _________________________________________________&#xD;
	//	lval_delay_dly2      _____________|                                               |__________&#xD;
	//                                        _________________________________________________&#xD;
	//	lval_delay_dly3      _________________|                                               |______&#xD;
	//                                            _________________________________________________&#xD;
	//	lval_delay_dly4      _____________________|                                               |__&#xD;
	//&#xD;
	//	mid line dly4        ---------------------|D0 |D1 |D2 |D3      -------------     |Dn-1|Dn |--&#xD;
	//&#xD;
	//	-------------------------------------------------------------------------------------</Template><Template Name="driver" Description="" Comments="0" Strings="0">//-------------------------------------------------------------------------------------------------&#xD;
//  -- &#x7248;&#x6743;&#x6240;&#x6709;&#x8005;   : &#x4E2D;&#x56FD;&#x5927;&#x6052;&#xFF08;&#x96C6;&#x56E2;&#xFF09;&#x6709;&#x9650;&#x516C;&#x53F8;&#x5317;&#x4EAC;&#x56FE;&#x50CF;&#x89C6;&#x89C9;&#x6280;&#x672F;&#x5206;&#x516C;&#x53F8;, 2010 -2015.&#xD;
//  -- &#x4FDD;&#x5BC6;&#x7EA7;&#x522B;     &#xFF1A;&#x7EDD;&#x5BC6;.&#xD;
//  -- &#x90E8;&#x95E8;         : &#x786C;&#x4EF6;&#x90E8;&#xFF0C;FPGA&#x5DE5;&#x4F5C;&#x7EC4;&#xD;
//  -- &#x6A21;&#x5757;&#x540D;       : driver_timestamp&#xD;
//  -- &#x8BBE;&#x8BA1;&#x8005;       : &#x90A2;&#x6D77;&#x6D9B;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//&#xD;
//  -- &#x7248;&#x672C;&#x8BB0;&#x5F55; :&#xD;
//&#xD;
//  -- &#x4F5C;&#x8005;         :| &#x4FEE;&#x6539;&#x65E5;&#x671F;				:|  &#x4FEE;&#x6539;&#x8BF4;&#x660E;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//  -- &#x90A2;&#x6D77;&#x6D9B;       :| 2016/04/25 17:43:54	:|  &#x521D;&#x59CB;&#x7248;&#x672C;&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//&#xD;
//  -- &#x6A21;&#x5757;&#x63CF;&#x8FF0;     :&#xD;
//              1)  :&#xD;
//&#xD;
//              2)  :&#xD;
//&#xD;
//              3)  :&#xD;
//&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
//`include			"driver_timestamp_def.v"&#xD;
//&#x4EFF;&#x771F;&#x5355;&#x4F4D;/&#x7CBE;&#x5EA6;&#xD;
`timescale 1ns/1ps&#xD;
//-------------------------------------------------------------------------------------------------&#xD;
`define		TESTCASE	testcase_1&#xD;
&#xD;
module driver_timestamp ();&#xD;
&#xD;
	//	ref signals&#xD;
	//	===============================================================================================&#xD;
	//	--ref parameter&#xD;
	//	===============================================================================================&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	//	&#x53C2;&#x6570;&#x5B9A;&#x4E49;&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	parameter	CLK_PERIOD_NS		= `TESTCASE.CLK_PERIOD_NS			;&#xD;
	parameter	LONG_REG_WD			= `TESTCASE.LONG_REG_WD			;&#xD;
&#xD;
	//	===============================================================================================&#xD;
	//	--ref signal&#xD;
	//	===============================================================================================&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	//	&#x8F93;&#x5165;&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	wire									clk	;&#xD;
	wire									reset	;&#xD;
	wire									i_fval		;&#xD;
	wire									i_timestamp_load	;&#xD;
&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	//	&#x8F93;&#x51FA;&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	wire	[LONG_REG_WD-1:0]				ov_timestamp_u3	;&#xD;
	wire	[LONG_REG_WD-1:0]				ov_timestamp_reg	;&#xD;
&#xD;
&#xD;
	//	ref ARCHITECTURE&#xD;
&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	//	&#x5F15;&#x7528;&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	assign	clk					= `TESTCASE.timestamp_clk	;&#xD;
	assign	reset				= `TESTCASE.reset	;&#xD;
	assign	i_fval				= `TESTCASE.i_fval		;&#xD;
	assign	i_timestamp_load	= `TESTCASE.i_timestamp_load	;&#xD;
&#xD;
	//  -------------------------------------------------------------------------------------&#xD;
	//	&#x4F8B;&#x5316; timestamp&#xD;
	//  -------------------------------------------------------------------------------------&#xD;
	timestamp # (&#xD;
	.CLK_PERIOD_NS			(CLK_PERIOD_NS			),&#xD;
	.LONG_REG_WD			(LONG_REG_WD			)&#xD;
	)&#xD;
	timestamp_inst (&#xD;
	.clk					(clk					),&#xD;
	.reset					(reset					),&#xD;
	.i_fval					(i_fval					),&#xD;
	.ov_timestamp_u3		(ov_timestamp_u3		),&#xD;
	.i_timestamp_load		(i_timestamp_load		),&#xD;
	.ov_timestamp_reg		(ov_timestamp_reg		)&#xD;
	);&#xD;
&#xD;
&#xD;
&#xD;
endmodule</Template><Template Name="sub" Description="" Comments="0" Strings="0">[+sig+]	&lt;= [+sig+] - 1'b1;</Template><Template Name="mono" Description="" Comments="0" Strings="0">	//	-------------------------------------------------------------------------------------&#xD;
	//	USB3 Vision 	version 1.0.1	March, 2015&#xD;
	//	table 5-14: Recommended Pixel Formats&#xD;
	//&#xD;
	//	Mono1p			0x01010037&#xD;
	//	Mono2p			0x01020038&#xD;
	//	Mono4p			0x01040039&#xD;
	//	Mono8			0x01080001&#xD;
	//	Mono10			0x01100003&#xD;
	//	Mono10p			0x010a0046&#xD;
	//	Mono12			0x01100005&#xD;
	//	Mono12p			0x010c0047&#xD;
	//	Mono14			0x01100025&#xD;
	//	Mono16			0x01100007&#xD;
	//&#xD;
	//	BayerGR8		0x01080008&#xD;
	//	BayerGR10		0x0110000C&#xD;
	//	BayerGR10p		0x010A0056&#xD;
	//	BayerGR12		0x01100010&#xD;
	//	BayerGR12p		0x010C0057&#xD;
	//	BayerGR16		0x0110002E&#xD;
	//&#xD;
	//	BayerRG8		0x01080009&#xD;
	//	BayerRG10		0x0110000D&#xD;
	//	BayerRG10p		0x010A0058&#xD;
	//	BayerRG12		0x01100011&#xD;
	//	BayerRG12p		0x010C0059&#xD;
	//	BayerRG16		0x0110002F&#xD;
	//&#xD;
	//	BayerGB8		0x0108000A&#xD;
	//	BayerGB10		0x0110000E&#xD;
	//	BayerGB10p		0x010A0054&#xD;
	//	BayerGB12		0x01100012&#xD;
	//	BayerGB12p		0x010C0055&#xD;
	//	BayerGB16		0x01100030&#xD;
	//&#xD;
	//	BayerBG8		0x0108000B&#xD;
	//	BayerBG10		0x0110000F&#xD;
	//	BayerBG10p		0x010A0052&#xD;
	//	BayerBG12		0x01100013&#xD;
	//	BayerBG12p		0x010C0053&#xD;
	//	BayerBG16		0x01100031&#xD;
&#xD;
	//	BGR8			0x02180015&#xD;
	//	BGR10			0x02300019&#xD;
	//	BGR10p			0x021E0048&#xD;
	//	BGR12			0x0230001B&#xD;
	//	BGR12p			0x02240049&#xD;
	//	BGR14			0x0230004A&#xD;
	//	BGR16			0x0230004B&#xD;
&#xD;
	//	BGRa8			0x02200017&#xD;
	//	BGRa10			0x0240004C&#xD;
	//	BGRa10p			0x0228004D&#xD;
	//	BGRa12			0x0240004E&#xD;
	//	BGRa12p			0x0230004F&#xD;
	//	BGRa14			0x02400050&#xD;
	//	BGRa16			0x02400051&#xD;
	//&#xD;
	//	YCbCr8			0x0218005B&#xD;
	//	YCbCr422_8		0x0210003B&#xD;
	//	YCbCr411_8		0x020C005A&#xD;
	//&#xD;
	//	--&#x5982;&#x679C;&#x8981;&#x5224;&#x65AD;&#x9ED1;&#x767D;&#x683C;&#x5F0F;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5224;&#x65AD;&#x4F4E;7bit&#x5C31;&#x53EF;&#x4EE5;&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	//	&#x5224;&#x65AD;&#x989C;&#x8272;&#x683C;&#x5F0F;&#xD;
	//	--&#x6839;&#x636E;u3v&#x534F;&#x8BAE;&#xFF0C;&#x5224;&#x65AD;&#x51FA;&#x9ED1;&#x767D;&#x7684;&#x50CF;&#x7D20;&#x683C;&#x5F0F;&#xD;
	//	--&#x53EA;&#x9700;&#x8981;&#x5224;&#x65AD;&#x4F4E;7bit&#x5373;&#x53EF;&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	always @ (posedge clk) begin&#xD;
		case(iv_pixel_format[6:0])&#xD;
			7'h37	: mono_sel	&lt;= 1'b1	;		//	Mono1p			0x01010037&#xD;
			7'h38	: mono_sel	&lt;= 1'b1	;		//	Mono2p			0x01020038&#xD;
			7'h39	: mono_sel	&lt;= 1'b1	;		//	Mono4p			0x01040039&#xD;
			7'h01	: mono_sel	&lt;= 1'b1	;		//	Mono8			0x01080001&#xD;
			7'h03	: mono_sel	&lt;= 1'b1	;		//	Mono10			0x01100003&#xD;
			7'h46	: mono_sel	&lt;= 1'b1	;		//	Mono10p			0x010a0046&#xD;
			7'h05	: mono_sel	&lt;= 1'b1	;		//	Mono12			0x01100005&#xD;
			7'h47	: mono_sel	&lt;= 1'b1	;		//	Mono12p			0x010c0047&#xD;
			7'h25	: mono_sel	&lt;= 1'b1	;		//	Mono14			0x01100025&#xD;
			7'h07	: mono_sel	&lt;= 1'b1	;		//	Mono16			0x01100007&#xD;
			default	: mono_sel	&lt;= 1'b0	;		//	others&#xD;
		endcase&#xD;
	end</Template><Template Name="format8" Description="" Comments="0" Strings="0">	//	-------------------------------------------------------------------------------------&#xD;
	//	USB3 Vision 	version 1.0.1	March, 2015&#xD;
	//	table 5-14: Recommended Pixel Formats&#xD;
	//&#xD;
	//	Mono1p			0x01010037&#xD;
	//	Mono2p			0x01020038&#xD;
	//	Mono4p			0x01040039&#xD;
	//	Mono8			0x01080001&#xD;
	//	Mono10			0x01100003&#xD;
	//	Mono10p			0x010a0046&#xD;
	//	Mono12			0x01100005&#xD;
	//	Mono12p			0x010c0047&#xD;
	//	Mono14			0x01100025&#xD;
	//	Mono16			0x01100007&#xD;
	//&#xD;
	//	BayerGR8		0x01080008&#xD;
	//	BayerGR10		0x0110000C&#xD;
	//	BayerGR10p		0x010A0056&#xD;
	//	BayerGR12		0x01100010&#xD;
	//	BayerGR12p		0x010C0057&#xD;
	//	BayerGR16		0x0110002E&#xD;
	//&#xD;
	//	BayerRG8		0x01080009&#xD;
	//	BayerRG10		0x0110000D&#xD;
	//	BayerRG10p		0x010A0058&#xD;
	//	BayerRG12		0x01100011&#xD;
	//	BayerRG12p		0x010C0059&#xD;
	//	BayerRG16		0x0110002F&#xD;
	//&#xD;
	//	BayerGB8		0x0108000A&#xD;
	//	BayerGB10		0x0110000E&#xD;
	//	BayerGB10p		0x010A0054&#xD;
	//	BayerGB12		0x01100012&#xD;
	//	BayerGB12p		0x010C0055&#xD;
	//	BayerGB16		0x01100030&#xD;
	//&#xD;
	//	BayerBG8		0x0108000B&#xD;
	//	BayerBG10		0x0110000F&#xD;
	//	BayerBG10p		0x010A0052&#xD;
	//	BayerBG12		0x01100013&#xD;
	//	BayerBG12p		0x010C0053&#xD;
	//	BayerBG16		0x01100031&#xD;
&#xD;
	//	BGR8			0x02180015&#xD;
	//	BGR10			0x02300019&#xD;
	//	BGR10p			0x021E0048&#xD;
	//	BGR12			0x0230001B&#xD;
	//	BGR12p			0x02240049&#xD;
	//	BGR14			0x0230004A&#xD;
	//	BGR16			0x0230004B&#xD;
&#xD;
	//	BGRa8			0x02200017&#xD;
	//	BGRa10			0x0240004C&#xD;
	//	BGRa10p			0x0228004D&#xD;
	//	BGRa12			0x0240004E&#xD;
	//	BGRa12p			0x0230004F&#xD;
	//	BGRa14			0x02400050&#xD;
	//	BGRa16			0x02400051&#xD;
	//&#xD;
	//	YCbCr8			0x0218005B&#xD;
	//	YCbCr422_8		0x0210003B&#xD;
	//	YCbCr411_8		0x020C005A&#xD;
	//	&#x5176;&#x4E2D; BGR8 BGRa8 YCbCr8 YCbCr422_8 YCbCr411_8 &#x4E0D;&#x662F;8bit&#x50CF;&#x7D20;&#x683C;&#x5F0F;&#xD;
	//  -------------------------------------------------------------------------------------&#xD;
	//	format8_sel&#xD;
	//	1.&#x5224;&#x65AD;&#x50CF;&#x7D20;&#x683C;&#x5F0F;&#x662F;&#x5426;&#x9009;&#x4E2D;8bit&#x50CF;&#x7D20;&#x683C;&#x5F0F;&#xD;
	//  -------------------------------------------------------------------------------------&#xD;
	always @ (posedge clk) begin&#xD;
		if(stream_enable_rise==1'b1) begin&#xD;
			case (iv_pixel_format[6:0])&#xD;
				7'h01		: format8_sel	&lt;= 1'b1;&#xD;
				7'h08		: format8_sel	&lt;= 1'b1;&#xD;
				7'h09		: format8_sel	&lt;= 1'b1;&#xD;
				7'h0A		: format8_sel	&lt;= 1'b1;&#xD;
				7'h0B		: format8_sel	&lt;= 1'b1;&#xD;
				default		: format8_sel	&lt;= 1'b0;&#xD;
			endcase&#xD;
		end&#xD;
	end</Template><Template Name="cdiv" Description="" Comments="0" Strings="0">	//	-------------------------------------------------------------------------------------&#xD;
	//	&#x9664;&#x6CD5;&#x4E0A;&#x53D6;&#x6574;&#xD;
	//	-------------------------------------------------------------------------------------&#xD;
	function integer cdiv;&#xD;
		input integer	dividend;	//&#x88AB;&#x9664;&#x6570;&#xD;
		input integer	divisior;	//&#x9664;&#x6570;&#xD;
		integer			division;	//&#x5546;&#xD;
&#xD;
		begin&#xD;
			//&#x6B64;&#x5904;&#x7684;&#x9664;&#x6CD5;&#x662F;&#x4E0B;&#x53D6;&#x6574;&#xD;
			division	= dividend/divisior;&#xD;
			//&#x5982;&#x679C; &#x5546;*&#x9664;&#x6570;=&#x88AB;&#x9664;&#x6570; &#xFF0C;&#x5219;&#x662F;&#x6574;&#x9664;&#x3002;&#x5426;&#x5219;&#xFF0C;&#x5B58;&#x5728;&#x7701;&#x7565;&#x7684;&#x5C0F;&#x6570;&#x90E8;&#x5206;&#xFF0C;&#x5546;&#x8981;&#x52A0;1&#xD;
			cdiv		= (division*divisior==dividend) ? division : division+1;&#xD;
		end&#xD;
	endfunction</Template><Template Name="max" Description="" Comments="0" Strings="0">//	-------------------------------------------------------------------------------------&#xD;&#xD;
//	max&#x53D6;&#x6700;&#x5927;&#x503C;&#xD;&#xD;
//	-------------------------------------------------------------------------------------&#xD;&#xD;
function integer max(input integer n1, input integer n2);&#xD;&#xD;
	max = (n1 &gt; n2) ? n1 : n2;&#xD;&#xD;
endfunction</Template><Template Name="min" Description="" Comments="0" Strings="0">function integer min(input integer n1, input integer n2);&#xD;
	min = (n1 &lt; n2) ? n1 : n2;&#xD;
endfunction</Template><Template Name="lane" Description="" Comments="0" Strings="0">genvar	i;&#xD;
generate&#xD;
	for(i=0;i&lt;CHANNEL_NUM;i=i+1) begin&#xD;
		assign	wv_data_lane[i]	= iv_pix_data[DATA_WIDTH*(i+1)-1:DATA_WIDTH*i];&#xD;
	end&#xD;
endgenerate&#xD;
&#xD;
genvar	i;&#xD;
generate&#xD;
	for(i=0;i&lt;CHANNEL_NUM;i=i+1) begin&#xD;
		assign	iv_pix_data[DATA_WIDTH*(i+1)-1:DATA_WIDTH*i]	= wv_data_lane[i];&#xD;
	end&#xD;
endgenerate</Template><Template Name="alwaysc" Description="" Comments="0" Strings="0">//	-------------------------------------------------------------------------------------&#xD;
//	Conbinatial Logic&#xD;
//	-------------------------------------------------------------------------------------&#xD;
always @ ( * ) begin&#xD;
	if() begin&#xD;
		reg1	= 1'b1;&#xD;
	end&#xD;
	else begin&#xD;
		reg1	= 1'b0;&#xD;
	end&#xD;
end</Template><Template Name="fdisplay" Description="" Comments="0" Strings="0">$fdisplay(file_handle, "rd_ptr is: %h,rd_addr is: %h",rd_ptr,rd_addr);</Template><Template Name="cycle_acc_minus" Description="" Comments="0" Strings="0">//	-------------------------------------------------------------------------------------&#xD;&#xD;
//	cycle_acc_minus &#x5FAA;&#x73AF;&#x7D2F;&#x52A0;&#x51FD;&#x6570;&#xFF0C;&#x7D2F;&#x52A0;&#x4E4B;&#x540E;&#x518D;&#x51CF;1&#xD;&#xD;
//	-------------------------------------------------------------------------------------&#xD;&#xD;
function integer cycle_acc_minus;&#xD;&#xD;
	input integer	in_cnt;&#xD;&#xD;
	integer	i;&#xD;&#xD;
&#xD;&#xD;
	begin&#xD;&#xD;
		cycle_acc_minus	= 0 ;&#xD;&#xD;
		for(i=0;i&lt;32;i=i+1) begin&#xD;&#xD;
			cycle_acc_minus	= cycle_acc_minus + in_cnt[i];&#xD;&#xD;
		end&#xD;&#xD;
		cycle_acc_minus	= cycle_acc_minus - 1;&#xD;&#xD;
	end&#xD;&#xD;
endfunction</Template><Template Name="cycle_acc" Description="" Comments="0" Strings="0">//	-------------------------------------------------------------------------------------&#xD;&#xD;
//	cycle_acc &#x5FAA;&#x73AF;&#x7D2F;&#x52A0;&#x51FD;&#x6570;&#xD;&#xD;
//	-------------------------------------------------------------------------------------&#xD;&#xD;
function integer cycle_acc;&#xD;&#xD;
	input integer	in_cnt;&#xD;&#xD;
	integer	i;&#xD;&#xD;
&#xD;&#xD;
	begin&#xD;&#xD;
		cycle_acc	= 0 ;&#xD;&#xD;
		for(i=0;i&lt;32;i=i+1) begin&#xD;&#xD;
			cycle_acc	= cycle_acc + in_cnt[i];&#xD;&#xD;
		end&#xD;&#xD;
	end&#xD;&#xD;
endfunction</Template></Templates>
