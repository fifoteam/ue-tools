//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : i2c_wrap
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 版本号	:| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| V1.0		:| 2018/11/19 16:13:26	:|  初始版本
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     :
//              1)  :
//
//              2)  :
//
//              3)  :
//
//-------------------------------------------------------------------------------------------------
//`include			"i2c_wrap_def.v"
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module i2c_wrap (
	//输入信号
	input					clk					,	//输入时钟
	output					o_led_d6			,	//led
	output					o_led_d7			,	//led
	output					o_led_d8			,	//led
	output					o_led_d9			,	//led
	inout					i2c1scl				,	//
	inout					i2c1sda
	);
	//	ref paramters
	localparam		LED_CLK_FREQ_KHZ			= 27000							;	//像素时钟频率，单位KHZ，很多模块用该时钟作为定时器，因此必须写明像素时钟的频率
	localparam		TIME_INTERVAL_1SEC			= 1000*LED_CLK_FREQ_KHZ			;	//计数到 1SEC ，需要多少个时钟周期
	localparam		CNT_1SEC_WIDTH				= log2(TIME_INTERVAL_1SEC+1)	;	//计数器位宽


	//	ref functions
	//	-------------------------------------------------------------------------------------
	//	取对数，上取整
	//	log2取对数的时候，有两种情况。分别是计算计数器的位宽和计算通道偏移的bit数
	//	1.计算计数器的位宽，使用 y = log2(x+1)，当x=2^n时，y=n+1，可以表示0-2^(n+1)-1的数值
	//	2.计算通道偏移的bit数，使用 y = log2(x)，当x=2^n时，y=n，可以表示0-2^n-1的数值
	//	-------------------------------------------------------------------------------------
	function integer log2 (input integer xx);
		integer x;
		begin
			x	= xx-1 ;
			for (log2=0;x>0;log2=log2+1) begin
				x	= x >> 1;
			end
		end
	endfunction

	//	-------------------------------------------------------------------------------------
	//	i2c_slave_ctrl
	//	-------------------------------------------------------------------------------------
	wire								w_start			;
	wire								w_we			;
	wire	[3:0]						wv_addr			;
	wire	[7:0]						wv_data			;
	wire	[15:0]						wv_reg_addr		;
	wire								w_wr_reg_en		;
	wire	[7:0]						wv_wr_data		;
	wire								w_rd_reg_en		;

	//	-------------------------------------------------------------------------------------
	//	i2c_cmd
	//	-------------------------------------------------------------------------------------
	wire								w_ack			;
	wire	[7:0]						wv_ack_data		;
	wire								w_i2c_cs		;
	wire								w_i2c_stb		;
	wire								w_i2c_we		;
	wire	[3:0]						wv_i2c_addr		;
	wire	[7:0]						wv_i2c_data		;

	//	-------------------------------------------------------------------------------------
	//	i2c
	//	-------------------------------------------------------------------------------------
	wire								w_i2c_ack		;
	wire	[9:0]						wv_i2c_dout		;

	//	-------------------------------------------------------------------------------------
	//	reg_file_bram
	//	-------------------------------------------------------------------------------------
	wire	[15:0]						wv_reg_din    	;
	wire	[7:0]						wv_reg_din_int    	;

	//	-------------------------------------------------------------------------------------
	//	led
	//	-------------------------------------------------------------------------------------
	reg				[CNT_1SEC_WIDTH-1:0]		div_1hz_cnt		= 'b0;
	reg											twinkle_1hz		= 1'b0;


	reg		[4:0]								pwr_cnt			= 'b0;
	wire										pwr_reset		;

	wire	o_state_in_dummy		;
	wire	o_state_in_trrdy		;
	wire	o_state_in_rxdr		;

	//	ref ARCHITECTURE

	//  ===============================================================================================
	//	ref module inst
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	上电复位逻辑
	//	1.fpga 加载成功之后，会对 dcm pll产生复位信号，复位信号宽度是8个时钟周期
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(pwr_cnt[4] == 1'b0) begin
			pwr_cnt	<= pwr_cnt + 1'b1;
		end
	end
	assign	pwr_reset	= !pwr_cnt[4];


	//	-------------------------------------------------------------------------------------
	//	i2c 控制器
	//	-------------------------------------------------------------------------------------
	i2c_slave_ctrl i2c_slave_ctrl_inst (
	.clk					(clk					),
	.reset					(pwr_reset				),
	.o_start				(w_start				),
	.o_we					(w_we					),
	.ov_addr				(wv_addr				),
	.ov_data				(wv_data				),
	.i_ack					(w_ack					),
	.iv_data				(wv_ack_data			),
	.ov_reg_addr			(wv_reg_addr			),
	.o_wr_reg_en			(w_wr_reg_en			),
	.ov_wr_data				(wv_wr_data				),
	.o_rd_reg_en			(w_rd_reg_en			),
	//	.iv_reg_din			(wv_reg_din				)
	.iv_reg_din				(wv_reg_din_int			),
	.o_state_in_dummy		(o_state_in_dummy		),
	.o_state_in_trrdy		(o_state_in_trrdy		),
	.o_state_in_rxdr		(o_state_in_rxdr		)
	);

	//	-------------------------------------------------------------------------------------
	//	与i2c硬核交互的接口
	//	-------------------------------------------------------------------------------------
	i2c_cmd i2c_cmd_inst (
	.clk					(clk					),
	.reset					(pwr_reset				),
	.i_start				(w_start				),
	.i_we					(w_we					),
	.iv_addr				(wv_addr				),
	.iv_data				(wv_data				),
	.o_ctrl_ack				(w_ack					),
	.ov_ctrl_dout			(wv_ack_data			),
	.i_i2c_ack				(w_i2c_ack				),
	.iv_i2c_dout			(wv_i2c_dout[7:0]		),
	.o_i2c_cs				(w_i2c_cs				),
	.o_i2c_stb				(w_i2c_stb				),
	.o_i2c_we				(w_i2c_we				),
	.ov_i2c_addr			(wv_i2c_addr			),
	.ov_i2c_data    		(wv_i2c_data	  		)
	);

	//	-------------------------------------------------------------------------------------
	//	i2c 硬核
	//	-------------------------------------------------------------------------------------
	i2c i2c_slave (
	.i2c1clki				(clk					),
	.i2c1csi				(w_i2c_cs				),
	.i2c1stbi				(w_i2c_stb				),
	.i2c1wei				(w_i2c_we				),
	.i2c1adri				(wv_i2c_addr			),
	.i2c1dati				({2'b0,wv_i2c_data}		),
	.i2c1scl				(i2c1scl				),
	.i2c1sda				(i2c1sda				),
	.i2c1acko				(w_i2c_ack				),
	.i2c1dato				(wv_i2c_dout			)
	);

	//	-------------------------------------------------------------------------------------
	//	寄存器存储器
	//	-------------------------------------------------------------------------------------
	reg_file_bram reg_file_bram_inst (
	.Reset					(pwr_reset				),
	.WrClock				(clk					),
	.WrClockEn				(1'b1					),
	.WrAddress				(wv_reg_addr[8:0]		),
	.Data					({8'b0,wv_wr_data}		),
	.WE						(w_wr_reg_en			),
	.RdClock				(clk					),
	.RdClockEn				(1'b1					),
	.RdAddress				(wv_reg_addr[8:0]		),
	.Q						(wv_reg_din				)
	);

	assign	wv_reg_din_int	= (wv_reg_addr[8:0]==9'h0) ? 8'h48 : wv_reg_din[7:0];


	//	===============================================================================================
	//	ref led output
	//	===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	1Hz信号
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(div_1hz_cnt==(TIME_INTERVAL_1SEC-1)) begin
			div_1hz_cnt	<= 'b0;
		end
		else begin
			div_1hz_cnt	<= div_1hz_cnt + 1'b1;
		end
	end

	always @ (posedge clk) begin
		if(div_1hz_cnt==(TIME_INTERVAL_1SEC-1)) begin
			twinkle_1hz	<= !twinkle_1hz;
		end
	end

	assign	o_led_d6	= twinkle_1hz;
	assign	o_led_d7	= o_state_in_dummy;
	assign	o_led_d8	= o_state_in_trrdy;
	assign	o_led_d9	= o_state_in_rxdr;


endmodule
