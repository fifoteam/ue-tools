//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2018.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : chunk_format
//  -- 设计者       : 张少强
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 版本号	:| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 张少强       :| V1.0		:| 2019/02/22 18:12:51	:|  初始版本
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     :
//              1)  :
//
//              2)  :
//
//              3)  :
//
//-------------------------------------------------------------------------------------------------
//`include			"chunk_format_def.v"
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module chunk_format # (
	parameter	GEV_DE_WD									= 2			,	//数据单元使能位宽，4byte数据使用一个使能位
	parameter	GEV_BE_WD									= 8			,	//字节使能位宽，1byte数据使用一个使能位
	parameter	GEV_DATA_WD									= 64		,	//数据位宽，支持32、64、128
	parameter	LONG_REG_WD									= 64		,	//固定64
	parameter	REG_WD										= 32		,	//固定32
	parameter	SHORT_REG_WD								= 16			//固定16
	)
	(
	input										clk_gev					,	//输入时钟
	//	-------------------------------------------------------------------------------------
	//	与gvsp_ctrl_core交互
	//	-------------------------------------------------------------------------------------
	input										i_resending_flag		,	//clk_gev时钟域,为1时表示当前是重传流，为0时表示当前是正常流
	//	-------------------------------------------------------------------------------------
	//	与resend_status交互
	//	-------------------------------------------------------------------------------------
	input	[LONG_REG_WD-1:0]					iv_bid_resend			,	//clk_gev时钟域，重传流blockid
	input	[SHORT_REG_WD-1:0]					iv_chunk_start			,	//clk_gev时钟域, 重传chunk起始字节（在chunk分开关起作用后）
	input	[SHORT_REG_WD-1:0]					iv_chunk_len			,	//clk_gev时钟域, 重传chunk长度（在chunk分开关起作用后）
	//	-------------------------------------------------------------------------------------
	//	与frame_info_analysis交互
	//	-------------------------------------------------------------------------------------
	input										i_chunk_mode_active		,	//clk_gev时钟域，chunk开关寄存器
	input										i_chunkid_en_img		,	//clk时钟域，image开关寄存器
	input										i_chunkid_en_fid		,	//clk_gev时钟域，frame id开关寄存器
	input										i_chunkid_en_ts			,	//clk_gev时钟域，时间戳开关寄存器
	input										i_chunkid_en_fint		,	//clk_gev时钟域，frame interval开关寄存器
	input	[REG_WD-1:0]						iv_imagesize			,	//clk_gev时钟域，image数据大小，不包含chunk部分
	input	[LONG_REG_WD-1:0]					iv_bid_normal			,	//clk_gev时钟域，正常流blockid
	//	-------------------------------------------------------------------------------------
	//	与packet_payload模块交互
	//	-------------------------------------------------------------------------------------
	input										i_chunk_format_start	,	//clk_gev时钟域，chunk_format启动信号，1bit高电平
	input										i_chunk_rd				,	//clk_gev时钟域，chunk_buffer读信号，高有效
	output										o_chunk_empty			,	//clk_gev时钟域，表示当前chunk_buffer空
	output	[GEV_DATA_WD-1:0]					ov_chunk_data			,	//clk_gev时钟域，输出chunk数据
	output	[GEV_BE_WD-1:0]						ov_chunk_dval				//clk_gev时钟域，数据有效信号,ov_data_chunk每4字节对应ov_dval的1bit
	);
	//	===============================================================================================
	//	ref functions
	//	===============================================================================================


	//	===============================================================================================
	//	ref paramters
	//	===============================================================================================


	//	===============================================================================================
	//	ref signals
	//	===============================================================================================


	//	===============================================================================================
	//	ref ARCHITECTURE
	//	===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	edge
	//  -------------------------------------------------------------------------------------


	//  -------------------------------------------------------------------------------------
	//	instantiate "gvcp_rx_buffer" module
	//  -------------------------------------------------------------------------------------




endmodule
