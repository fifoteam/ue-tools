//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : frame_buffer
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 版本号	:| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| V1.0		:| 2018/7/18 19:03:51	:|  划分模块端口
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     :
//              1)  : 帧存模块，默认配置为，外部2Gbit（64MByte*32bit） DDR3，工作在400MHz，2帧缓存，支持配置到256帧缓存，支持重传
//						DDR3: DQ 32,BANK ADDR 3,ROW ADDR 13,COL ADDR 10
//              2)  :
//
//              3)  :
//
//-------------------------------------------------------------------------------------------------
//`include			"frame_buffer_def.v"
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------
module frame_buffer # (
	parameter	BID_WD										= 16		,	//BID的位宽，gev1.2 位宽是16，gev2.0 位宽是64
	parameter	PID_WD										= 24		,	//PID的位宽，gev1.2 位宽是24，gev2.0 位宽是32
	parameter	DATA_WD										= 256		,	//输出数据位宽
	parameter	MASK_WD										= 32		,	//数据屏蔽信号位宽
	parameter	IMAGE_SIZE_WD								= 32		,	//图像数据大小位宽，以字节为单位
	parameter	BYTE_ADDR_WD								= 28		,	//有效地址位宽，DDR3容量不同，位宽不同。1Gbit-27 2Gbit-28 4Gbit-29
	parameter	SHORT_REG_WD   								= 16		,	//短寄存器位宽
	parameter	REG_WD  						 			= 32		,	//寄存器位宽
	parameter	LONG_REG_WD  						 		= 64		,	//长寄存器位宽
	parameter	FBOUT_DATA_WD								= 64		,	//输出数据位宽，支持32、64、128...，最小是32。每32位数据，有3个使能信号。
	parameter	FBOUT_DE_WD									= 2			,	//帧存输出数据使能位宽，4byte数据使用一个使能位
	parameter	MAX_FRAME_DEPTH								= 2			,	//最大的帧存深度，最小是1帧。可设置为 1 2 3 4 5 6 ......
	parameter	MEM_DQ_WD									= 32		,	//DDR3 数据宽度
	parameter	MEM_ADDR_WD									= 14		,	//DDR3 地址宽度
	parameter	MEM_BANKADDR_WD								= 3			,	//DDR3 bank地址宽度
	parameter	MEM_DM_WD									= 4			,	//DDR3 数据屏蔽信号宽度
	parameter	MEM_DQS_WD									= 4			,	//DDR3 数据选通信号宽度
	parameter	PKT_LENGTH_WD								= 14		,	//packet length 包长寄存器宽度
	parameter	PKT_CNT_WD									= 18			//一帧图像中包含的完整包个数的位宽
	)
	(
	//	===============================================================================================
	//	图像输入时钟域
	//	===============================================================================================
	//  -------------------------------------------------------------------------------------
	//  图像输入数据
	//  -------------------------------------------------------------------------------------
	input							clk_in								,	//前端FIFO写入数据时钟
	input							i_fval								,	//clk_in时钟域，场有效信号，高有效，i_fval的上升沿要比i_dval的上升沿提前，i_fval的下降沿要比i_dval的下降沿滞后；i_fval和i_dval上升沿之间要有足够的空隙，最小值是MAX(6*clk_in,6*clk_frame_buf)；i_fval和i_dval下降沿之间要有足够的空隙，最小值是1*clk_in + 7*clk_frame_buf
	input							i_dval								,	//clk_in时钟域，数据有效信号，高有效，数据有效不像行信号一样连续，可以是断续的信号
	input							i_info_flag							,	//clk_in时钟域，信息段标志，高有效
	input							i_image_flag						,	//clk_in时钟域，图像段标志，高有效
	input							i_statis_flag						,	//clk_in时钟域，统计段标志，高有效
	input	[DATA_WD-1:0]			iv_data								,	//clk_in时钟域，图像数据，位宽可变，支持32 64 128 256
	input	[IMAGE_SIZE_WD-1:0]		iv_image_size						,	//clk时钟域，帧存写入的一帧图像的大小，以byte为单位
	output							o_fb_fifo_overflow					,	//clk_in时钟域，帧存前端FIFO溢出，高有效，调试使用
	//	===============================================================================================
	//	重传命令写入时钟域
	//	===============================================================================================
	//  -------------------------------------------------------------------------------------
	//  时钟和复位信号
	//  -------------------------------------------------------------------------------------
	input							clk_gev								,	//gev工作时钟
	input							reset_gev							,	//gev工作时钟域的复位信号，高有效
	//	-------------------------------------------------------------------------------------
	//	写入的重传信息
	//	-------------------------------------------------------------------------------------
	input	[LONG_REG_WD-1:0]		iv_resend_block_id					,	//clk_gev时钟域，block id
	input	[REG_WD-1:0]			iv_resend_packet_id_first			,	//clk_gev时钟域，packet id first，重传起始
	input	[REG_WD-1:0]			iv_resend_packet_id_last			,	//clk_gev时钟域，packet id last，重传结束
	input							i_resend_en							,	//clk_gev时钟域，ov_resend_cmd写使能，发送给重传命令fifo，高有效
	//	===============================================================================================
	//	图像输出时钟域
	//	===============================================================================================
	//  -------------------------------------------------------------------------------------
	//  图像输出数据
	//  -------------------------------------------------------------------------------------
	input							i_fb_rd								,	//clk_gev时钟域，后端fifo读出使能信号，高有效
	output							o_fb_empty							,	//clk_gev时钟域，后端fifo空信号，高有效
	output	[FBOUT_DE_WD-1:0]		ov_data_is_cmd						,	//clk_gev时钟域，帧存后端fifo输出数据是命令数据，单bit代表4byte，1-表示是命令数据，0-表示是图像数据
	output	[FBOUT_DE_WD-1:0]		ov_dval								,	//clk_gev时钟域，帧存后端fifo输出数据有效信号，单bit代表4byte，1-表示数据有效，0-表示数据无效
	output	[FBOUT_DATA_WD-1:0]		ov_data								,	//clk_gev时钟域，后端fifo输出数据
	//	===============================================================================================
	//	帧缓存工作时钟域
	//	===============================================================================================
	//  -------------------------------------------------------------------------------------
	//  控制数据
	//  -------------------------------------------------------------------------------------
	input							i_stream_enable						,	//clk_fb时钟域，流停止信号，高有效，有效时允许数据从帧存读出，无效时立即停止读出，并复位读写地址指针，清帧存
	input							i_fb_transfer_start					,	//clk_fb时钟域，帧存传输有效信号，高有效，以一个完整帧为单位，有效时允许数据从帧存读出，无效时不能读出数据，但是不会复位读帧号，在读一帧开始时生效
	input	[SHORT_REG_WD-1:0]		iv_frame_depth						,	//clk_fb时钟域，帧缓存深度，0-单帧，1-2帧，2-3帧，3-4帧，在 i_stream_enable 上升沿生效
	input							i_fb_overwrite						,	//clk_fb时钟域，帧存覆盖使能，高有效，写帧号追上读帧号时，如果帧覆盖使能，则写帧号会跳过读帧号，否则写帧号不变重新刷新当前帧，，在 i_stream_enable 上升沿生效
	input  	[PKT_LENGTH_WD-1:0]		iv_pkt_length						,	//clk时钟域，packet length 正常包包长
	input  	[PKT_LENGTH_WD-1:0]		iv_remain_pkt_length				,	//clk时钟域，remain packet length 残包包长(包含帧信息部分)
	input	[PKT_CNT_WD-1:0]		iv_pic_pkt_cnt						,	//clk时钟域，图像包含的完整数据包个数
	input							i_mroi_global_en					,	//clk时钟域，multi-roi全局打开使能，高有效
	input	[REG_WD-1:0]			iv_mroi_num_en						,	//clk时钟域，roi使能个数，0表示1个roi或者multi-roi没有使能，最大是31表示32个roi使能
	output	[REG_WD-1:0]			ov_mroi_num_resend					,	//clk时钟域，重传帧是mroi的第几个，按位有效
	output							o_frame_cover_event					,	//clk时钟域，帧覆盖事件，单bit脉冲，高有效
	output							o_frame_not_empty_event				,	//clk时钟域，帧存不为空事件，单bit脉冲，高有效
	//	===============================================================================================
	//	MIG相关
	//	===============================================================================================
	//  -------------------------------------------------------------------------------------
	//  时钟和复位信号
	//  -------------------------------------------------------------------------------------
	input							clk_mig								,	//MIG输入时钟，该时钟经过内部MMCM之后，生成高速时钟
	input							reset_mig							,	//MIG复位信号，高有效
	input							clk_ref								,	//MIG参考时钟
	output							clk_fb								,	//帧存模块工作时钟
	output							reset_fb							,	//帧存模块工作时钟域的复位信号，高有效
	//  -------------------------------------------------------------------------------------
	//  MIG Status
	//  -------------------------------------------------------------------------------------
	output							o_calib_done						,	//DDR3 校准完成信号，高有效，时钟域未知
	//  -------------------------------------------------------------------------------------
	//  DDR3 芯片接口
	//  -------------------------------------------------------------------------------------
	inout	[MEM_DQ_WD-1:0]			ddr3_dq								,  	//DDR3 数据信号
	output	[MEM_ADDR_WD-1:0]		ddr3_addr							,	//DDR3 地址信号
	output	[MEM_BANKADDR_WD-1:0]	ddr3_ba								,	//DDR3 bank 地址信号
	output                  		ddr3_ras_n							,	//DDR3 行选通信号，低有效
	output                  		ddr3_cas_n							,	//DDR3 列选通信号，低有效
	output                  		ddr3_we_n							,	//DDR3 写使能信号，低有效
	output                  		ddr3_odt							,	//DDR3 阻抗匹配信号，高有效
	output                  		ddr3_reset_n						,	//DDR3 复位信号，低有效
	output                  		ddr3_cke							,	//DDR3 时钟使能信号，高有效
	output  [MEM_DM_WD-1:0]			ddr3_dm								,	//DDR3 数据屏蔽信号，高有效，以byte为单位
	inout   [MEM_DQS_WD-1:0]		ddr3_dqs_p							,	//DDR3 数据选通信号正，以byte为单位
	inout   [MEM_DQS_WD-1:0]		ddr3_dqs_n							,	//DDR3 数据选通信号负，以byte为单位
	output                  		ddr3_ck_p							,	//DDR3 时钟信号正
	output							ddr3_ck_n								//DDR3 时钟信号负
	);


	//	ref functions
	//	-------------------------------------------------------------------------------------
	//	取对数，上取整
	//	-------------------------------------------------------------------------------------
	function integer log2 (input integer xx);
		integer x;
		begin
			x	= xx-1 ;
			for (log2=0;x>0;log2=log2+1) begin
				x	= x >> 1;
			end
		end
	endfunction


	//	ref paramters
	//	-------------------------------------------------------------------------------------
	//	以下参数需要和顶层parameter联动，请添加公式
	//	-------------------------------------------------------------------------------------
	//	===============================================================================================
	//	--ref addr parameter
	//	===============================================================================================
	//	-------------------------------------------------------------------------------------
	//	一次burst的长度
	//	以字节为单位，改变其大小会影响DDR的读写效率。
	//	-------------------------------------------------------------------------------------
	localparam	BURST_SIZE					= 2048;
	//	-------------------------------------------------------------------------------------
	//	MIG fifo 位宽的byte个数。读写MIG fifo一次，操作的byte个数
	//	-------------------------------------------------------------------------------------
	localparam	MIG_BYTE_NUM				= DATA_WD/8;
	//	-------------------------------------------------------------------------------------
	//	DDR芯片数据位宽的byte个数
	//	-------------------------------------------------------------------------------------
	localparam	DQ_PINS_BYTE_NUM			= MEM_DQ_WD/8;
	//	-------------------------------------------------------------------------------------
	//	MIG fifo 位宽的byte个数对应的位宽。
	//	这个宏定义用于计算地址位宽
	//	-------------------------------------------------------------------------------------
	localparam	MIG_DATA_BYTE_NUM_WD		= log2(MIG_BYTE_NUM);
	//	-------------------------------------------------------------------------------------
	//	DDR芯片数据位宽的byte个数对应的位宽。
	//	这个宏定义用于计算地址位宽
	//	-------------------------------------------------------------------------------------
	localparam	DQ_PINS_BYTE_NUM_WD			= log2(DQ_PINS_BYTE_NUM);
	//	-------------------------------------------------------------------------------------
	//	MIG读写地址最大位宽，与DDR芯片数据引脚个数有关，DDR地址变化以DDR是以DDR引脚个数为单位
	//	8bit  DDR3芯片 -- MIG地址以 1byte 为单位
	//	16bit DDR3芯片 -- MIG地址以 2byte 为单位
	//	32bit DDR3芯片 -- MIG地址以 4byte 为单位
	//	64bit DDR3芯片 -- MIG地址以 8byte 为单位
	//	-------------------------------------------------------------------------------------
	localparam	MIG_ADDR_WD   				= BYTE_ADDR_WD-DQ_PINS_BYTE_NUM_WD	;	//MIG地址信号位宽
	//	-------------------------------------------------------------------------------------
	//	通过最大的帧存深度，计算出读写指针的位宽
	//	1.多帧时，位宽为log2(MAX_FRAME_DEPTH)
	//	2.最大帧存深度与位宽的对应关系
	//	--最大深度2帧	  		位宽1
	//	--最大深度3帧或者4帧  	位宽2
	//	--最大深度5帧到8帧    	位宽2
	//	--最大深度最大65536帧 	位宽16
	//	3.如果错误设置为0，程序中要保护，强制为1
	//	-------------------------------------------------------------------------------------
	localparam	PTR_WD						= log2(MAX_FRAME_DEPTH);
	//	-------------------------------------------------------------------------------------
	//	写计数器 wr_addr 的最大位宽
	//	1.单次写操作的数据量都是由MIG用户端数据位宽决定的：
	//	  8bit  DDR3芯片 -- MIG数据位宽 8byte  为单位
	//	  16bit DDR3芯片 -- MIG数据位宽 16byte 为单位
	//	  32bit DDR3芯片 -- MIG数据位宽 32byte 为单位
	//	  64bit DDR3芯片 -- MIG数据位宽 64byte 为单位
	//	2.每次写的长度和起始地址是严格按照MIG用户端数据位宽操作的
	//	-------------------------------------------------------------------------------------
	localparam	WR_ADDR_WD   				= BYTE_ADDR_WD-MIG_DATA_BYTE_NUM_WD	;

	localparam	RD_ADDR_WD   				= BYTE_ADDR_WD-MIG_DATA_BYTE_NUM_WD	;
	//	-------------------------------------------------------------------------------------
	//	读计数器 rd_addr 的最大位宽
	//	表示帧内地址位宽，以字节为单位
	//	-------------------------------------------------------------------------------------
	localparam	FRAME_BYTE_ADDR_WD   		= BYTE_ADDR_WD-PTR_WD;	//

	//	-------------------------------------------------------------------------------------
	//	INFO段数据帧内起始地址位置
	//	-------------------------------------------------------------------------------------
	localparam	INFO_FLAG_ADDR				= 0		;
	//	-------------------------------------------------------------------------------------
	//	INFO段数据量，以byte为单位
	//	-------------------------------------------------------------------------------------
	localparam	INFO_SIZE					= 256	;
	//	-------------------------------------------------------------------------------------
	//	IMAGE段数据帧内起始地址位置
	//	-------------------------------------------------------------------------------------
	localparam	IMAGE_FLAG_ADDR				= INFO_FLAG_ADDR + INFO_SIZE	;
	//	-------------------------------------------------------------------------------------
	//	STATIS段数据量，以byte为单位
	//	-------------------------------------------------------------------------------------
	localparam	STATIS_SIZE					= 256	;
	//	-------------------------------------------------------------------------------------
	//	STATIS段数据帧内起始地址位置
	//	-------------------------------------------------------------------------------------
	localparam	STATIS_FLAG_ADDR			= 2**(BYTE_ADDR_WD-PTR_WD) - STATIS_SIZE	;
	//	-------------------------------------------------------------------------------------
	//	burst cnt计数器位宽
	//	-------------------------------------------------------------------------------------
	localparam	BURST_CNT_WD				= log2(BURST_SIZE)				;

	//	ref signals
	//	-------------------------------------------------------------------------------------
	//	fb write 相关信号
	//	-------------------------------------------------------------------------------------
	wire								w_fb_can_read						;
	wire	[PTR_WD-1:0]				wv_frame_depth						;	//fb_write输出，clk_fb时钟域，经过生效时机控制的缓存深度
	wire	[PTR_WD-1:0]				wv_wr_ptr							;	//fb_write输出，clk_fb时钟域，写帧号
	wire	[WR_ADDR_WD-1:0]			wv_wr_addr							;	//fb_write输出，clk_fb时钟域，写地址
	wire								w_wr_ptr_changing					;	//fb_write输出，clk_fb时钟域，写帧号正在变化信号，高有效，当该信号有效时，读帧号不能变化
	wire								w_writing							;	//fb_write输出，clk_fb时钟域，正在写标志，高有效
	wire								w_wr_cmd_req						;	//fb_write输出，clk_fb时钟域，写请求信号，高有效，发出写命令之前先发出写请求，写命令全部写完之后写请求要清除
	wire								w_wr_cmd_en							;	//fb_write输出，clk_fb时钟域，写命令使能，高有效
	wire								w_wr_cmd_rdy						;	//fb_arbiter输出，clk_fb时钟域，写命令准备好信号，高有效，在该信号有效时才能写命令
	wire	[BYTE_ADDR_WD-1:0]			wv_wr_cmd_byte_addr					;	//fb_write输出，clk_fb时钟域，写命令地址

	//	-------------------------------------------------------------------------------------
	//	fb read 相关信号
	//	-------------------------------------------------------------------------------------
	wire	[PTR_WD-1:0]				wv_rd_ptr_normal					;	//fb_read输出，clk_fb时钟域，读帧号，表示当前正常读的帧号
	wire	[PTR_WD-1:0]				wv_rd_ptr_resend					;	//fb_read输出，clk_fb时钟域，读帧号，表示当前重传读的帧号
	wire								w_fval_read							;	//fb_read输出，clk_fb时钟域，场有效信号，高有效
	wire								w_aval_read							;	//fb_read输出，clk_fb时钟域，地址有效信号，高有效
	wire								w_info_flag_read					;	//fb_read输出，clk_fb时钟域，信息段标志，高有效
	wire								w_image_flag_read					;	//fb_read输出，clk_fb时钟域，图像段标志，高有效
	wire								w_statis_flag_read					;	//fb_read输出，clk_fb时钟域，统计段标志，高有效
	wire	[FRAME_BYTE_ADDR_WD-1:0]	wv_rd_addr_read						;	//fb_read输出，clk_fb时钟域，读地址
	wire	[FRAME_BYTE_ADDR_WD-1:0]	wv_rd_length_read					;	//fb_read输出，clk_fb时钟域，读长度，以byte为单位
	wire								w_ardy_plugins						;	//fb_read_plugins输出，clk_fb时钟域，地址准备好信号，高有效，有效时表示可以接受下一个地址
	wire								w_rd_cmd_req						;	//fb_read输出，clk_fb时钟域，读请求信号，高有效，发出写命令之前先发出写请求，写命令全部写完之后写请求要清除
	wire								w_rd_cmd_en							;	//fb_read输出，clk_fb时钟域，读命令使能，高有效
	wire								w_rd_cmd_rdy						;	//fb_read输出，clk_fb时钟域，读命令准备好信号，高有效，在该信号有效时才能写命令
	wire	[BYTE_ADDR_WD-1:0]			wv_rd_cmd_byte_addr					;	//fb_read输出，clk_fb时钟域，读命令地址

	//	-------------------------------------------------------------------------------------
	//	fb read plugins 相关信号
	//	-------------------------------------------------------------------------------------
	wire								w_fval_plugins						;	//fb_read_plugins输出，clk_fb时钟域，场有效信号，高有效
	wire								w_pval_plugins						;	//fb_read_plugins输出，clk_fb时钟域，包有效信号，高有效
	wire								w_aval_plugins						;	//fb_read_plugins输出，clk_fb时钟域，地址有效信号，高有效
	wire								w_info_flag_plugins					;	//fb_read_plugins输出，clk_fb时钟域，信息段标志，高有效
	wire								w_image_flag_plugins				;	//fb_read_plugins输出，clk_fb时钟域，图像段标志，高有效
	wire								w_statis_flag_plugins				;	//fb_read_plugins输出，clk_fb时钟域，统计段标志，高有效
	wire	[FRAME_BYTE_ADDR_WD-1:0]	wv_rd_addr_plugins					;	//fb_read_plugins输出，clk_fb时钟域，读地址
	wire	[FRAME_BYTE_ADDR_WD-1:0]	wv_rd_length_plugins				;	//fb_read_plugins输出，clk_fb时钟域，读长度，以byte为单位
	wire								w_ardy_read							;	//fb_read_plugins输出，fb_read输出，clk_fb时钟域，地址准备好信号，高有效，有效时表示可以接受下一个地址
	wire								w_resend_rdy						;	//fb_read_plugins输出，重传准备好信号，高有效，有效时表示上一个重传命令处理完且可以接收下一个重传命令，无效时表示正在处理重传命令
	wire								w_resend_addr_cmd_wr_done           ;   //fb_read_plugins输出，一帧重传地址及数据全部写入addr_buffer完毕标志
	wire								w_resend_valid                      ;   //fb_read_plugins输出，重传可见包使能信号，高有效
	wire								w_resend_unvalid                    ;   //fb_read_plugins输出，重传可见包使能信号，高有效
	wire	[LONG_REG_WD-1:0]			wv_resend_block_id                  ;   //fb_read_plugins输出，重传block id
	wire	[REG_WD-1:0]				wv_resend_packet_id_first           ;   //fb_read_plugins输出，重传packet id first，重传起始
	wire	[REG_WD-1:0]				wv_resend_packet_id_last            ;   //fb_read_plugins输出，重传packet id last，重传结束
	wire								w_resending                         ;   //fb_read_plugins输出，正常读停止标志，高有效
	wire								w_normal_read_repeat                ;   //fb_read_plugins输出，正常流重复一次标志，高有效，一个时钟脉冲
	wire	[PTR_WD-1:0]				wv_rd_ptr_now						;	//clk时钟域，读帧号，表示当前正在读的这一帧的帧号
	wire	[LONG_REG_WD-1:0]			wv_block_id_now						;	//clk时钟域，block id，表示当前正在读的这一帧的block id
	//	-------------------------------------------------------------------------------------
	//	与MIG交互信号
	//	-------------------------------------------------------------------------------------
	wire	[MIG_ADDR_WD-1:0]			app_addr							;	//fb_arbiter输出，clk_fb时钟域，命令地址
	wire	[2:0]						app_cmd								;	//fb_arbiter输出，clk_fb时钟域，命令
	wire								app_en								;	//fb_arbiter输出，clk_fb时钟域，命令使能
	wire								app_rdy								;	//MIG输出，clk_fb时钟域，MIG命令准备好信号
	wire	[DATA_WD-1:0]				app_wdf_data						;	//fb_write输出，clk_fb时钟域，MIG写数据
	wire								app_wdf_wren						;	//fb_write输出，clk_fb时钟域，MIG写使能信号，高有效
	wire	[MASK_WD-1:0]				app_wdf_mask						;	//fb_write输出，clk_fb时钟域，MIG写准备好信号，高有效，在该信号有效时才能写数据
	wire								app_wdf_rdy							;	//fb_write输出，clk_fb时钟域，MIG写准备好信号，高有效，在该信号有效时才能写数据
	wire	[DATA_WD-1:0]				app_rd_data							;	//MIG输出，clk_fb时钟域，MIG数据输出
	wire								app_rd_data_valid					;	//MIG输出，clk_fb时钟域，MIG数据有效信号，高有效，在该信号有效时MIG输出的数据有效

	//	ref ARCHITECTURE

	//	-------------------------------------------------------------------------------------
	//	帧存写逻辑
	//	-------------------------------------------------------------------------------------
	fb_write # (
	.DATA_WD						(DATA_WD						),
	.MASK_WD						(MASK_WD						),
	.PTR_WD							(PTR_WD							),
	.BURST_CNT_WD					(BURST_CNT_WD					),
	.BYTE_ADDR_WD					(BYTE_ADDR_WD					),
	.WR_ADDR_WD						(WR_ADDR_WD						),
	.BURST_SIZE						(BURST_SIZE						),
	.MIG_DATA_BYTE_NUM_WD			(MIG_DATA_BYTE_NUM_WD			),
	.INFO_FLAG_ADDR					(INFO_FLAG_ADDR					),
	.IMAGE_FLAG_ADDR				(IMAGE_FLAG_ADDR				),
	.STATIS_FLAG_ADDR				(STATIS_FLAG_ADDR				),
	.SHORT_REG_WD					(SHORT_REG_WD					),
	.REG_WD							(REG_WD							)
	)
	fb_write_inst (
	.clk_in							(clk_in							),
	.i_fval							(i_fval							),
	.i_dval							(i_dval							),
	.i_info_flag					(i_info_flag					),
	.i_image_flag					(i_image_flag					),
	.i_statis_flag					(i_statis_flag					),
	.iv_data						(iv_data						),
	.o_fb_fifo_overflow				(o_fb_fifo_overflow				),
	.clk							(clk_fb							),
	.reset							(reset_fb						),
	.i_stream_enable				(i_stream_enable				),
	.iv_frame_depth					(iv_frame_depth					),
	.ov_frame_depth					(wv_frame_depth					),
	.i_fb_overwrite					(i_fb_overwrite					),
	.i_calib_done					(o_calib_done					),
	.o_fb_can_read					(w_fb_can_read					),
	.ov_wr_ptr						(wv_wr_ptr						),
	.ov_wr_addr						(wv_wr_addr						),
	.o_wr_ptr_changing				(w_wr_ptr_changing				),
	.o_writing						(w_writing						),
	.iv_rd_ptr_normal				(wv_rd_ptr_normal				),
	.iv_rd_ptr_resend				(wv_rd_ptr_resend				),
	.o_wr_en						(app_wdf_wren					),
	.i_wr_rdy						(app_wdf_rdy					),
	.ov_wr_data						(app_wdf_data					),
	.ov_wr_mask						(app_wdf_mask					),
	.o_wr_cmd_req					(w_wr_cmd_req					),
	.o_wr_cmd_en					(w_wr_cmd_en					),
	.i_wr_cmd_rdy					(w_wr_cmd_rdy					),
	.ov_wr_cmd_byte_addr			(wv_wr_cmd_byte_addr			),
	.o_frame_cover_event			(o_frame_cover_event			),
	.o_frame_not_empty_event		(o_frame_not_empty_event		)
	);

	//	-------------------------------------------------------------------------------------
	//	帧存读逻辑
	//	-------------------------------------------------------------------------------------
	fb_read # (
	.MIG_BYTE_NUM					(MIG_BYTE_NUM					),
	.MIG_DATA_BYTE_NUM_WD			(MIG_DATA_BYTE_NUM_WD			),
	.INFO_FLAG_ADDR					(INFO_FLAG_ADDR					),
	.INFO_SIZE						(INFO_SIZE						),
	.IMAGE_FLAG_ADDR				(IMAGE_FLAG_ADDR				),
	.STATIS_FLAG_ADDR				(STATIS_FLAG_ADDR				),
	.STATIS_SIZE					(STATIS_SIZE					),
	.SHORT_REG_WD					(SHORT_REG_WD					),
	.LONG_REG_WD					(LONG_REG_WD					),
	.REG_WD							(REG_WD							),
	.RD_ADDR_WD						(RD_ADDR_WD						),
	.DATA_WD						(DATA_WD						),
	.PTR_WD							(PTR_WD							),
	.BURST_CNT_WD					(BURST_CNT_WD					),
	.BYTE_ADDR_WD					(BYTE_ADDR_WD					),
	.IMAGE_SIZE_WD					(IMAGE_SIZE_WD					),
	.WR_ADDR_WD						(WR_ADDR_WD						),
	.FRAME_BYTE_ADDR_WD				(FRAME_BYTE_ADDR_WD				),
	.FBOUT_DE_WD					(FBOUT_DE_WD					),
	.FBOUT_DATA_WD					(FBOUT_DATA_WD					),
	.BURST_SIZE						(BURST_SIZE						)
	)
	fb_read_inst (
	.clk_gev						(clk_gev						),
	.i_fb_rd						(i_fb_rd						),
	.o_fb_empty						(o_fb_empty						),
	.ov_data_is_cmd					(ov_data_is_cmd					),
	.ov_dval						(ov_dval						),
	.ov_data						(ov_data						),
	.clk							(clk_fb							),
	.reset							(reset_fb						),
	.i_stream_enable				(i_stream_enable				),
	.i_fb_transfer_start			(i_fb_transfer_start			),
	.i_fb_can_read					(w_fb_can_read					),
	.iv_frame_depth					(wv_frame_depth					),
	.iv_image_size					(iv_image_size					),
	.i_calib_done					(o_calib_done					),
	.i_wr_ptr_changing				(w_wr_ptr_changing				),
	.iv_wr_ptr						(wv_wr_ptr						),
	.iv_wr_addr						(wv_wr_addr						),
	.i_writing						(w_writing						),
	.ov_rd_ptr_normal				(wv_rd_ptr_normal				),
	.i_ardy							(w_ardy_plugins					),
	.o_fval							(w_fval_read					),
	.o_aval							(w_aval_read					),
	.o_info_flag					(w_info_flag_read	    		),
	.o_image_flag					(w_image_flag_read	    		),
	.o_statis_flag					(w_statis_flag_read	    		),
	.ov_rd_addr						(wv_rd_addr_read				),
	.ov_rd_length					(wv_rd_length_read	    		),
	.i_normal_read_repeat			(w_normal_read_repeat			),
	.iv_rd_ptr_resend				(wv_rd_ptr_resend				),
	.ov_rd_ptr_now					(wv_rd_ptr_now					),
	.ov_block_id_now				(wv_block_id_now				),
	.o_resend_rdy					(w_resend_rdy					),
	.o_resend_addr_cmd_wr_done		(w_resend_addr_cmd_wr_done		),
	.i_resend_valid					(w_resend_valid					),
	.i_resend_unvalid				(w_resend_unvalid				),
	.iv_resend_block_id				(wv_resend_block_id				),
	.iv_resend_packet_id_first		(wv_resend_packet_id_first		),
	.iv_resend_packet_id_last		(wv_resend_packet_id_last		),
	.i_resending					(w_resending					),
	.i_fval							(w_fval_plugins		    		),
	.i_pval							(w_pval_plugins		    		),
	.i_aval							(w_aval_plugins		    		),
	.i_info_flag					(w_info_flag_plugins			),
	.i_image_flag					(w_image_flag_plugins			),
	.i_statis_flag					(w_statis_flag_plugins			),
	.iv_rd_addr						(wv_rd_addr_plugins	    		),
	.iv_rd_length					(wv_rd_length_plugins			),
	.o_ardy							(w_ardy_read					),
	.i_rd_valid						(app_rd_data_valid				),
	.iv_rd_data						(app_rd_data					),
	.o_rd_cmd_req					(w_rd_cmd_req					),
	.o_rd_cmd_en					(w_rd_cmd_en					),
	.i_rd_cmd_rdy					(w_rd_cmd_rdy					),
	.ov_rd_cmd_byte_addr			(wv_rd_cmd_byte_addr			)
	);

	//	-------------------------------------------------------------------------------------
	//	帧存读插件模块
	//	-------------------------------------------------------------------------------------
	fb_read_plugins # (
	.BID_WD							(BID_WD							),
	.PID_WD							(PID_WD							),
	.PTR_WD							(PTR_WD							),
	.SHORT_REG_WD					(SHORT_REG_WD					),
	.LONG_REG_WD					(LONG_REG_WD					),
	.REG_WD							(REG_WD							),
	.FRAME_BYTE_ADDR_WD				(FRAME_BYTE_ADDR_WD				),
	.PKT_LENGTH_WD					(PKT_LENGTH_WD					),
	.PKT_CNT_WD						(PKT_CNT_WD						)
	)
	fb_read_plugins_inst (
	.clk_gev						(clk_gev						),
	.reset_gev						(reset_gev						),
	.iv_resend_block_id				(iv_resend_block_id				),
	.iv_resend_packet_id_first		(iv_resend_packet_id_first		),
	.iv_resend_packet_id_last		(iv_resend_packet_id_last		),
	.i_resend_en					(i_resend_en					),
	.clk							(clk_fb							),
	.reset							(reset_fb						),
	.i_stream_enable				(i_stream_enable				),
	.iv_frame_depth					(wv_frame_depth					),
	.iv_pkt_length					(iv_pkt_length					),
	.iv_remain_pkt_length			(iv_remain_pkt_length			),
	.iv_pic_pkt_cnt					(iv_pic_pkt_cnt					),
	.i_mroi_global_en				(i_mroi_global_en				),
	.iv_mroi_num_en					(iv_mroi_num_en					),
	.ov_mroi_num_resend				(ov_mroi_num_resend				),
	.i_wr_ptr_changing				(w_wr_ptr_changing				),
	.iv_wr_ptr						(wv_wr_ptr						),
	.ov_rd_ptr_resend				(wv_rd_ptr_resend				),
	.o_normal_read_repeat			(w_normal_read_repeat			),
	.i_resend_rdy					(w_resend_rdy					),
	.i_resend_addr_cmd_wr_done		(w_resend_addr_cmd_wr_done		),
	.o_resend_valid					(w_resend_valid					),
	.o_resend_unvalid				(w_resend_unvalid				),
	.ov_resend_block_id				(wv_resend_block_id				),
	.ov_resend_packet_id_first		(wv_resend_packet_id_first		),
	.ov_resend_packet_id_last		(wv_resend_packet_id_last		),
	.o_resending					(w_resending					),
	.iv_rd_ptr_now					(wv_rd_ptr_now					),
	.iv_block_id_now				(wv_block_id_now				),
	.i_fval							(w_fval_read					),
	.i_aval							(w_aval_read					),
	.i_info_flag					(w_info_flag_read				),
	.i_image_flag					(w_image_flag_read				),
	.i_statis_flag					(w_statis_flag_read				),
	.iv_rd_addr						(wv_rd_addr_read				),
	.iv_rd_length					(wv_rd_length_read				),
	.o_ardy							(w_ardy_plugins					),
	.o_fval							(w_fval_plugins					),
	.o_pval							(w_pval_plugins					),
	.o_aval							(w_aval_plugins					),
	.o_info_flag					(w_info_flag_plugins			),
	.o_image_flag					(w_image_flag_plugins			),
	.o_statis_flag					(w_statis_flag_plugins			),
	.ov_rd_addr						(wv_rd_addr_plugins				),
	.ov_rd_length					(wv_rd_length_plugins			),
	.i_ardy							(w_ardy_read					)
	);

	//	-------------------------------------------------------------------------------------
	//	MIG命令仲裁模块
	//	-------------------------------------------------------------------------------------
	fb_arbiter # (
	.BYTE_ADDR_WD					(BYTE_ADDR_WD					),
	.MIG_ADDR_WD					(MIG_ADDR_WD					)
	)
	fb_arbiter_inst (
	.clk							(clk_fb							),
	.reset							(reset_fb						),
	.i_wr_cmd_req					(w_wr_cmd_req					),
	.i_rd_cmd_req					(w_rd_cmd_req					),
	.o_wr_cmd_rdy					(w_wr_cmd_rdy					),
	.o_rd_cmd_rdy					(w_rd_cmd_rdy					),
	.i_wr_cmd_en					(w_wr_cmd_en					),
	.i_rd_cmd_en					(w_rd_cmd_en					),
	.iv_wr_cmd_byte_addr			(wv_wr_cmd_byte_addr			),
	.iv_rd_cmd_byte_addr			(wv_rd_cmd_byte_addr			),
	.i_app_rdy						(app_rdy						),
	.o_app_en						(app_en							),
	.ov_app_cmd						(app_cmd						),
	.ov_app_addr					(app_addr						)
	);

	//	-------------------------------------------------------------------------------------
	//	MIG 7series
	//	-------------------------------------------------------------------------------------
	mig_7series mig_7series_inst (
	.ddr3_dq						(ddr3_dq						),
	.ddr3_dqs_n						(ddr3_dqs_n						),
	.ddr3_dqs_p						(ddr3_dqs_p						),
	.ddr3_addr						(ddr3_addr						),
	.ddr3_ba						(ddr3_ba						),
	.ddr3_ras_n						(ddr3_ras_n						),
	.ddr3_cas_n						(ddr3_cas_n						),
	.ddr3_we_n						(ddr3_we_n						),
	.ddr3_reset_n					(ddr3_reset_n					),
	.ddr3_ck_p						(ddr3_ck_p						),
	.ddr3_ck_n						(ddr3_ck_n						),
	.ddr3_cke						(ddr3_cke						),
	.ddr3_dm						(ddr3_dm						),
	.ddr3_odt						(ddr3_odt						),
	.sys_clk_i						(clk_mig						),
	.clk_ref_i						(clk_ref						),
	.app_addr						({1'b0,app_addr}				),
	.app_cmd						(app_cmd						),
	.app_en							(app_en							),
	.app_wdf_data					(app_wdf_data					),
	.app_wdf_end					(app_wdf_wren					),	//app_wdf_end与app_wdf_wren是同一个信号
	.app_wdf_mask					(app_wdf_mask					),
	.app_wdf_wren					(app_wdf_wren					),
	.app_rd_data					(app_rd_data					),
	.app_rd_data_end				(								),
	.app_rd_data_valid				(app_rd_data_valid				),
	.app_rdy						(app_rdy						),
	.app_wdf_rdy					(app_wdf_rdy					),
	.app_sr_req						(1'b0							),
	.app_ref_req					(1'b0							),
	.app_zq_req						(1'b0							),
	.app_sr_active					(								),
	.app_ref_ack					(								),
	.app_zq_ack						(								),
	.ui_clk							(clk_fb							),
	.ui_clk_sync_rst				(reset_fb						),
	.init_calib_complete			(o_calib_done					),
	.device_temp					(								),
	.sys_rst						(reset_mig						)
	);




endmodule