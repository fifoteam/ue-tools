//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : fb_read
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 版本号	:| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| V1.0		:| 2018/7/17 11:14:07	:|  划分模块端口
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     :
//              1)  :
//
//              2)  :
//
//              3)  :
//
//-------------------------------------------------------------------------------------------------
//`include			"fb_read_def.v"
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------
module fb_read # (
	parameter	MIG_BYTE_NUM									= 32		,	//MIG fifo 位宽的byte个数。读写MIG fifo一次，操作的byte个数
	parameter	MIG_DATA_BYTE_NUM_WD							= 5			,	//MIG fifo 位宽的byte个数对应的位宽
	parameter	INFO_FLAG_ADDR									= 0			,	//INFO段首地址
	parameter	INFO_SIZE										= 256		,	//INFO段数据量，以byte为单位
	parameter	IMAGE_FLAG_ADDR									= 2			,	//IMAGE段首地址
	parameter	STATIS_FLAG_ADDR								= 4			,	//STATIS段首地址
	parameter	STATIS_SIZE										= 256		,	//STATIS段数据量，以byte为单位
	parameter	SHORT_REG_WD   									= 16		,	//短寄存器位宽
	parameter	LONG_REG_WD  						 			= 64		,	//长寄存器位宽
	parameter	REG_WD  						 				= 32		,	//寄存器位宽
	parameter	RD_ADDR_WD										= 27		,
	parameter	DATA_WD											= 256		,	//输入数据位宽
	parameter	PTR_WD											= 2			,	//读写指针的位宽
	parameter	BURST_CNT_WD									= 7			,	//burst cnt 位宽
	parameter	BYTE_ADDR_WD									= 27		,	//有效地址位宽，DDR3容量不同，位宽不同
	parameter	IMAGE_SIZE_WD									= 32		,	//图像数据大小位宽，以字节为单位
	parameter	WR_ADDR_WD   									= 19		,	//帧内地址位宽
	parameter	FRAME_BYTE_ADDR_WD   							= 27		,	//帧内有效地址位宽，以字节为单位
	parameter	FBOUT_DE_WD										= 2			,	//帧存输出数据使能位宽，4byte数据使用一个使能位
	parameter	FBOUT_DATA_WD									= 64		,	//输出数据位宽，支持32、64、128...，最小是32。每32位数据，有3个使能信号。
	parameter	BURST_SIZE										= 32			//突发长度，以DATA_WD为单位
	)
	(
	//  -------------------------------------------------------------------------------------
	//  图像输出数据
	//  -------------------------------------------------------------------------------------
	input								clk_out								,	//后端FIFO读出时钟
	input								i_fb_rd								,	//clk_out时钟域，后端fifo读出使能信号，高有效
	output								o_fb_empty							,	//clk_out时钟域，后端fifo空信号，高有效
	output	[FBOUT_DE_WD-1:0]			ov_data_is_cmd						,	//clk_out时钟域，帧存后端fifo输出数据是命令数据，单bit代表4byte，1-表示是命令数据，0-表示是图像数据
	output	[FBOUT_DE_WD-1:0]			ov_dval								,	//clk_out时钟域，帧存后端fifo输出数据有效信号，单bit代表4byte，1-表示数据有效，0-表示数据无效
	output	[FBOUT_DATA_WD-1:0]			ov_data								,	//clk_out时钟域，后端fifo输出数据
	//	===============================================================================================
	//	帧缓存工作时钟域
	//	===============================================================================================
	//  -------------------------------------------------------------------------------------
	//  时钟和复位信号
	//  -------------------------------------------------------------------------------------
	input								clk									,	//帧存模块工作时钟
	input								reset								,	//帧存模块工作时钟域的复位信号，高有效
	//  -------------------------------------------------------------------------------------
	//  控制数据
	//  -------------------------------------------------------------------------------------
	input								i_stream_enable						,	//clk时钟域，流停止信号，高有效，有效时允许数据从帧存读出，无效时立即停止读出，并复位读写地址指针，清帧存
	input								i_fb_transfer_start					,	//clk时钟域，帧存传输有效信号，高有效，以一个完整帧为单位，有效时允许数据从帧存读出，无效时不能读出数据，但是不会复位读帧号
	input								i_fb_can_read						,	//clk时钟域，帧存后端可以读使能信号
	input	[PTR_WD-1:0]				iv_frame_depth						,	//clk时钟域，帧缓存深度，0-单帧，1-2帧，2-3帧，3-4帧，经过生效时机控制
	input	[IMAGE_SIZE_WD-1:0]			iv_image_size						,	//clk时钟域，帧存写入的一帧图像的大小，以byte为单位
	input								i_calib_done						,	//时钟域未知，DDR3校准完成信号，高有效
	//  -------------------------------------------------------------------------------------
	//  与 fb_write 交互
	//  -------------------------------------------------------------------------------------
	input								i_wr_ptr_changing					,	//clk时钟域，写帧号正在变化信号，高有效，当该信号有效时，读帧号不能变化
	input	[PTR_WD-1:0]				iv_wr_ptr							,	//clk时钟域，写帧号，表示当前正在写的帧号
	input	[WR_ADDR_WD-1:0]			iv_wr_addr							,	//clk时钟域，写地址，表示当前正在写的一帧内的地址
	input								i_writing							,	//clk时钟域，正在写标志，高有效
	output	[PTR_WD-1:0]				ov_rd_ptr_normal					,	//clk时钟域，读帧号，表示当前正常读的帧号
	//  -------------------------------------------------------------------------------------
	//  与 fb_read_plugins 交互，输出内容
	//  -------------------------------------------------------------------------------------
	input								i_ardy								,	//clk时钟域，地址准备好信号，高有效，有效时表示可以接受下一个地址
	output								o_fval								,	//clk时钟域，场有效信号，高有效
	output								o_aval								,	//clk时钟域，地址有效信号，高有效
	output								o_info_flag							,	//clk时钟域，信息段标志，高有效
	output								o_image_flag						,	//clk时钟域，图像段标志，高有效
	output								o_statis_flag						,	//clk时钟域，统计段标志，高有效
	output	[FRAME_BYTE_ADDR_WD-1:0]	ov_rd_addr							,	//clk时钟域，读地址
	output	[FRAME_BYTE_ADDR_WD-1:0]	ov_rd_length						,	//clk时钟域，读长度，以byte为单位
	//  -------------------------------------------------------------------------------------
	//  与 fb_read_plugins 交互，输入内容
	//  -------------------------------------------------------------------------------------
	input								i_normal_read_repeat				,	//clk时钟域，正常流重复一次标志，高有效，一个时钟脉冲
	input	[PTR_WD-1:0]				iv_rd_ptr_resend					,	//clk时钟域，读帧号，表示当前重传读的帧号
	output	[PTR_WD-1:0]				ov_rd_ptr_now						,	//clk时钟域，读帧号，表示当前正在读的这一帧的帧号
	output	[LONG_REG_WD-1:0]			ov_block_id_now						,	//clk时钟域，block id，表示当前正在读的这一帧的block id
	output								o_resend_rdy						,	//clk时钟域，重传准备好信号，高有效，有效时表示上一个重传命令处理完且可以接收下一个重传命令，无效时表示正在处理重传命令
	output								o_resend_addr_cmd_wr_done			,	//clk时钟域，一帧重传地址及数据全部写入addr_buffer完毕标志
	input								i_resend_valid						,	//clk时钟域，重传可见包使能信号，高有效
	input								i_resend_unvalid					,	//clk时钟域，重传可见包使能信号，高有效
	input	[LONG_REG_WD-1:0]			iv_resend_block_id					,	//clk时钟域，重传block id
	input	[REG_WD-1:0]				iv_resend_packet_id_first			,	//clk时钟域，重传packet id first，重传起始
	input	[REG_WD-1:0]				iv_resend_packet_id_last			,	//clk时钟域，重传packet id last，重传结束
	input								i_resending							,	//clk时钟域，正常读停止标志，高有效
	input								i_fval								,	//clk时钟域，场有效信号，高有效
	input								i_pval								,	//clk时钟域，一个网络包有效数据标志，是连续信号，期间发出的地址对应一个包长的数据
	input								i_aval								,	//clk时钟域，地址有效信号，高有效
	input								i_info_flag							,	//clk时钟域，信息段标志，高有效
	input								i_image_flag						,	//clk时钟域，图像段标志，高有效
	input								i_statis_flag						,	//clk时钟域，统计段标志，高有效
	input	[FRAME_BYTE_ADDR_WD-1:0]	iv_rd_addr							,	//clk时钟域，读地址
	input	[FRAME_BYTE_ADDR_WD-1:0]	iv_rd_length						,	//clk时钟域，读长度，以byte为单位
	output								o_ardy								,	//clk时钟域，地址准备好信号，高有效，有效时表示可以接受下一个地址
	//  -------------------------------------------------------------------------------------
	//  与 MIG read port 交互
	//  -------------------------------------------------------------------------------------
	input								i_rd_valid							,	//clk时钟域，MIG数据有效信号，高有效，在该信号有效时MIG输出的数据有效
	input	[DATA_WD-1:0]				iv_rd_data							,	//clk时钟域，MIG数据输出
	//  -------------------------------------------------------------------------------------
	//  与 MIG cmd port 交互
	//  -------------------------------------------------------------------------------------
	output								o_rd_cmd_req						,	//clk时钟域，读请求信号，高有效，发出写命令之前先发出写请求，写命令全部写完之后写请求要清除
	output								o_rd_cmd_en							,	//clk时钟域，读命令使能，高有效
	input								i_rd_cmd_rdy						,	//clk时钟域，读命令准备好信号，高有效，在该信号有效时才能写命令
	output	[BYTE_ADDR_WD-1:0]			ov_rd_cmd_byte_addr						//clk时钟域，读命令地址
	);

	//	ref paramters
	localparam		ADDR_BUFFER_WD						= 36				;	//addr_buffer接口位宽
	localparam		CTRL_WORD_WD						= 2					;	//每个最小数据单元中，包含控制字的位数
	localparam		UNIT_BYTE_NUM						= 4					;	//每个最小数据单元中，包含的字节个数
	localparam		VALID_BIT_NUM						= 8					;	//MIG输出的数据中，对应有效位的个数
	localparam		NORMAL_FRAME_START_CMD 				= 34'h100000004		;	//正常帧开始命令
	localparam		NORMAL_FRAME_END_CMD 				= 34'h100000104		;	//正常帧结束命令
	localparam		RESEND_FRAME_START_VALID_CMD 		= 34'h110000204		;	//包含可见包的重传帧开始命令
	localparam		RESEND_FRAME_START_UNVALID_CMD 		= 34'h110010204		;	//包含不可见包的重传帧开始命令
	localparam		RESEND_FRAME_END_CMD 				= 34'h100000304		;	//重传帧结束命令
	localparam		INFO_START_CMD 						= 36'h100000404 + ((INFO_SIZE>>8)<<16) + ((INFO_SIZE-256*(INFO_SIZE>>8))<<24);
	localparam		IMAGE_START_CMD 					= 36'h100000504 	;
	localparam		STATIS_START_CMD 					= 36'h100000604 + ((STATIS_SIZE>>8)<<16) + ((STATIS_SIZE-256*(STATIS_SIZE>>8))<<24);
	localparam		PACKET_START_CMD 					= 36'h100000704		;

	//	ref signals
	wire								w_normal_frame_done					;
	wire								w_resend_frame_done					;
	wire								w_normal_addr_cmd_wr_done			;
	wire								w_addr_buffer_wr					;
	wire	[ADDR_BUFFER_WD-1:0]		wv_addr_buffer_din					;
	wire								w_addr_buffer_prog_full				;

	//	ref ARCHITECTURE
	//	===============================================================================================
	//	ref ***fb_read_init instantiations***
	//	===============================================================================================
	fb_read_init # (
	.INFO_FLAG_ADDR						(INFO_FLAG_ADDR						),
	.INFO_SIZE							(INFO_SIZE							),
	.IMAGE_FLAG_ADDR					(IMAGE_FLAG_ADDR					),
	.STATIS_FLAG_ADDR					(STATIS_FLAG_ADDR					),
	.STATIS_SIZE						(STATIS_SIZE						),
	.PTR_WD								(PTR_WD								),
	.IMAGE_SIZE_WD						(IMAGE_SIZE_WD						),
	.FRAME_BYTE_ADDR_WD					(FRAME_BYTE_ADDR_WD					)
	)
	fb_read_init_inst (
	.clk								(clk								),
	.reset								(reset								),
	.i_stream_enable					(i_stream_enable					),
	.i_fb_transfer_start				(i_fb_transfer_start				),
	.iv_frame_depth						(iv_frame_depth						),
	.i_calib_done						(i_calib_done						),
	.iv_image_size						(iv_image_size						),
	.i_wr_ptr_changing					(i_wr_ptr_changing					),
	.iv_wr_ptr							(iv_wr_ptr							),
	.ov_rd_ptr_normal					(ov_rd_ptr_normal					),
	.i_normal_read_repeat				(i_normal_read_repeat				),
	.i_ardy								(i_ardy								),
	.o_fval								(o_fval								),
	.o_aval								(o_aval								),
	.o_info_flag						(o_info_flag						),
	.o_image_flag						(o_image_flag						),
	.o_statis_flag						(o_statis_flag						),
	.ov_rd_addr							(ov_rd_addr							),
	.ov_rd_length						(ov_rd_length						)
	);

	//	===============================================================================================
	//	ref *** fb_read_cmd instantiations***
	//	===============================================================================================
	fb_read_cmd # (
	.MIG_BYTE_NUM						(MIG_BYTE_NUM						),
	.MIG_DATA_BYTE_NUM_WD				(MIG_DATA_BYTE_NUM_WD				),
	.INFO_SIZE							(INFO_SIZE							),
	.STATIS_SIZE						(STATIS_SIZE						),
	.PTR_WD								(PTR_WD								),
	.LONG_REG_WD						(LONG_REG_WD						),
	.REG_WD								(REG_WD								),
	.FRAME_BYTE_ADDR_WD					(FRAME_BYTE_ADDR_WD					),
	.RD_ADDR_WD							(RD_ADDR_WD							),
	.ADDR_BUFFER_WD						(ADDR_BUFFER_WD						),
	.NORMAL_FRAME_START_CMD				(NORMAL_FRAME_START_CMD				),
	.NORMAL_FRAME_END_CMD				(NORMAL_FRAME_END_CMD				),
	.RESEND_FRAME_START_VALID_CMD		(RESEND_FRAME_START_VALID_CMD		),
	.RESEND_FRAME_START_UNVALID_CMD		(RESEND_FRAME_START_UNVALID_CMD		),
	.RESEND_FRAME_END_CMD				(RESEND_FRAME_END_CMD				),
	.INFO_START_CMD						(INFO_START_CMD						),
	.IMAGE_START_CMD					(IMAGE_START_CMD					),
	.STATIS_START_CMD					(STATIS_START_CMD					),
	.PACKET_START_CMD					(PACKET_START_CMD					)
	)
	fb_read_cmd_inst (
	.clk								(clk								),
	.reset								(reset								),
	.i_stream_enable					(i_stream_enable					),
	.iv_frame_depth						(iv_frame_depth						),
	.o_addr_buffer_wr					(w_addr_buffer_wr					),
	.ov_addr_buffer_din					(wv_addr_buffer_din					),
	.o_normal_addr_cmd_wr_done			(w_normal_addr_cmd_wr_done			),
	.i_addr_buffer_prog_full			(w_addr_buffer_prog_full			),
	.i_normal_frame_done				(w_normal_frame_done				),
	.i_resend_frame_done				(w_resend_frame_done				),
	.iv_rd_ptr_normal					(ov_rd_ptr_normal					),
	.iv_resend_block_id					(iv_resend_block_id					),
	.iv_resend_packet_id_first			(iv_resend_packet_id_first			),
	.iv_resend_packet_id_last			(iv_resend_packet_id_last			),
	.iv_rd_ptr_resend					(iv_rd_ptr_resend					),
	.i_fval								(i_fval								),
	.i_pval								(i_pval								),
	.i_aval								(i_aval								),
	.i_info_flag						(i_info_flag						),
	.i_image_flag						(i_image_flag						),
	.i_statis_flag						(i_statis_flag						),
	.iv_rd_addr							(iv_rd_addr							),
	.iv_rd_length						(iv_rd_length						),
	.o_ardy								(o_ardy								),
	.o_resend_rdy						(o_resend_rdy						),
	.o_resend_addr_cmd_wr_done			(o_resend_addr_cmd_wr_done			),
	.i_resend_valid						(i_resend_valid						),
	.i_resend_unvalid					(i_resend_unvalid					),
	.i_resending						(i_resending						)
	);

	//	===============================================================================================
	//	ref ***fb_read_core instantiations***
	//	===============================================================================================
	fb_read_core # (
	.DATA_WD							(DATA_WD							),
	.BURST_CNT_WD						(BURST_CNT_WD						),
	.MIG_DATA_BYTE_NUM_WD				(MIG_DATA_BYTE_NUM_WD				),
	.FBOUT_DE_WD						(FBOUT_DE_WD						),
	.FBOUT_DATA_WD						(FBOUT_DATA_WD						),
	.PTR_WD								(PTR_WD								),
	.BYTE_ADDR_WD						(BYTE_ADDR_WD						),
	.RD_ADDR_WD							(RD_ADDR_WD							),
	.WR_ADDR_WD							(WR_ADDR_WD							),
	.REG_WD								(REG_WD								),
	.LONG_REG_WD						(LONG_REG_WD						),
	.BURST_SIZE							(BURST_SIZE							),
	.ADDR_BUFFER_WD						(ADDR_BUFFER_WD						),
	.CTRL_WORD_WD						(CTRL_WORD_WD						),
	.UNIT_BYTE_NUM						(UNIT_BYTE_NUM						),
	.VALID_BIT_NUM						(VALID_BIT_NUM						),
	.NORMAL_FRAME_START_CMD				(NORMAL_FRAME_START_CMD				),
	.NORMAL_FRAME_END_CMD				(NORMAL_FRAME_END_CMD				),
	.RESEND_FRAME_START_VALID_CMD		(RESEND_FRAME_START_VALID_CMD		),
	.RESEND_FRAME_START_UNVALID_CMD		(RESEND_FRAME_START_UNVALID_CMD		),
	.RESEND_FRAME_END_CMD				(RESEND_FRAME_END_CMD				),
	.INFO_START_CMD						(INFO_START_CMD						)
	)
	fb_read_core_inst (
	.clk_out							(clk_out							),
	.i_fb_rd							(i_fb_rd							),
	.o_fb_empty							(o_fb_empty							),
	.ov_data_is_cmd						(ov_data_is_cmd						),
	.ov_dval							(ov_dval							),
	.ov_data							(ov_data							),
	.clk								(clk								),
	.reset								(reset								),
	.i_stream_enable					(i_stream_enable					),
	.i_fb_can_read						(i_fb_can_read						),
	.i_writing							(i_writing							),
	.iv_wr_ptr							(iv_wr_ptr							),
	.iv_wr_addr							(iv_wr_addr							),
	.iv_rd_ptr_normal					(ov_rd_ptr_normal					),
	.i_addr_cmd_wr_done					(w_normal_addr_cmd_wr_done			),
	.i_addr_buffer_wr					(w_addr_buffer_wr					),
	.iv_addr_buffer_din					(wv_addr_buffer_din					),
	.o_addr_buffer_prog_full			(w_addr_buffer_prog_full			),
	.o_normal_frame_done				(w_normal_frame_done				),
	.ov_rd_ptr_now						(ov_rd_ptr_now						),
	.ov_block_id_now					(ov_block_id_now					),
	.o_resend_frame_done				(w_resend_frame_done				),
	.i_rd_valid							(i_rd_valid							),
	.iv_rd_data							(iv_rd_data							),
	.o_rd_cmd_req						(o_rd_cmd_req						),
	.o_rd_cmd_en						(o_rd_cmd_en						),
	.i_rd_cmd_rdy						(i_rd_cmd_rdy						),
	.ov_rd_cmd_byte_addr				(ov_rd_cmd_byte_addr				)
	);


endmodule