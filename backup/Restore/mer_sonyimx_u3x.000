##-------------------------------------------------------------------------------------------------
##  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
##  -- 保密级别     ：绝密.
##  -- 部门         : 硬件部，FPGA工作组
##  -- 模块名       : mer_500_14u3x
##  -- 设计者       : 邢海涛
##-------------------------------------------------------------------------------------------------
##
##  -- 版本记录 :
##
##  -- 作者         :| 修改日期				:|  修改说明
##-------------------------------------------------------------------------------------------------
##  -- 邢海涛       :| 2015/3/31 16:06:19	:|  初始版本
##-------------------------------------------------------------------------------------------------
##
##  -- 模块描述     :  mer_500_14u3x工程约束文件
##              1)  : ... ...
##
##              2)  : ... ...
##
##              3)  : ... ...
##
##-------------------------------------------------------------------------------------------------
##	===============================================================================================
##	ref ***pin location***
##	===============================================================================================
##	-------------------------------------------------------------------------------------
##	-- ref clk reset
##	-------------------------------------------------------------------------------------
NET 	"clk_osc"				LOC = F1	| IOSTANDARD = "LVCMOS33"	;	#CLK_40M_IN

##	-------------------------------------------------------------------------------------
##	-- ref sensor
##	sensor 一路串行时钟一路串行控制信号四路串行数据
##	-------------------------------------------------------------------------------------
###imx174 249
#NET		"iv_pix_data_p[0]"		LOC = N9	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[1]"		LOC = L10   | IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[2]"		LOC = P8	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[3]"		LOC = M12   | IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[4]"		LOC = N5	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[5]"		LOC = P6    | IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[6]"		LOC = R5	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[7]"		LOC = R9    | IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_n[0]"		LOC = P9	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_n[1]"		LOC = M10   | IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_n[2]"		LOC = T8	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_n[3]"		LOC = M11   | IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_n[4]"		LOC = P5	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_n[5]"		LOC = T6    | IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_n[6]"		LOC = T5	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_n[7]"		LOC = T9    | IOSTANDARD = "LVDS_33";

#imx250 252 264 265
NET		"iv_pix_data_p[0]"		LOC = N9	| IOSTANDARD = "LVDS_33";
NET		"iv_pix_data_p[1]"		LOC = M12   | IOSTANDARD = "LVDS_33";
NET		"iv_pix_data_p[2]"		LOC = P8	| IOSTANDARD = "LVDS_33";
NET		"iv_pix_data_p[3]"		LOC = L10   | IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[4]"		LOC = N5	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[5]"		LOC = P6    | IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[6]"		LOC = R5	| IOSTANDARD = "LVDS_33";
#NET		"iv_pix_data_p[7]"		LOC = R9    | IOSTANDARD = "LVDS_33";

NET   	"iv_pix_data_n[0]"		LOC = P9	| IOSTANDARD = "LVDS_33";
NET     "iv_pix_data_n[1]"		LOC = M11   | IOSTANDARD = "LVDS_33";
NET     "iv_pix_data_n[2]"		LOC = T8	| IOSTANDARD = "LVDS_33";
NET     "iv_pix_data_n[3]"		LOC = M10   | IOSTANDARD = "LVDS_33";
#NET   	"iv_pix_data_n[4]"		LOC = P5	| IOSTANDARD = "LVDS_33";
#NET     "iv_pix_data_n[5]"		LOC = T6    | IOSTANDARD = "LVDS_33";
#NET     "iv_pix_data_n[6]"		LOC = T5	| IOSTANDARD = "LVDS_33";
#NET     "iv_pix_data_n[7]"		LOC = T9    | IOSTANDARD = "LVDS_33";


##公用
NET		"pix_clk_p"				LOC = M9	| IOSTANDARD = "LVDS_33";
NET		"pix_clk_n"				LOC = N8	| IOSTANDARD = "LVDS_33";
NET		"o_trigger_sensor_n"	LOC = L7    | IOSTANDARD = "LVCMOS33";
NET		"o_xhs"					LOC = M6    | IOSTANDARD = "LVCMOS33";
NET		"o_xvs"					LOC = L8    | IOSTANDARD = "LVCMOS33";
NET		"o_fpga_reset_sensor_n"	LOC = N6    | IOSTANDARD = "LVCMOS33";
NET		"o_clk_sensor"			LOC = P7    | IOSTANDARD = "LVCMOS33";


##备用
#NET		"i_tout[0]"				LOC = T7    | IOSTANDARD = "LVCMOS18";
#NET		"i_tout[1]"				LOC = R7    | IOSTANDARD = "LVCMOS18";

##	-------------------------------------------------------------------------------------
##	Sensor板互联的引脚，差分的信号要作为输入处理，这样信号质量会好一些
##	-------------------------------------------------------------------------------------


##	-------------------------------------------------------------------------------------
##	-- ref 3014
##	-------------------------------------------------------------------------------------
##	-------------------------------------------------------------------------------------
##	---- ref GPIF
##	-------------------------------------------------------------------------------------
NET	"ov_usb_data[0]"		LOC = A8	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ0
NET	"ov_usb_data[1]"		LOC = C13	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ1
NET	"ov_usb_data[2]"		LOC = B14	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ2
NET	"ov_usb_data[3]"		LOC = B6	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ3
NET	"ov_usb_data[4]"		LOC = A9	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ4
NET	"ov_usb_data[5]"		LOC = D12	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ5
NET	"ov_usb_data[6]"		LOC = A6	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ6
NET	"ov_usb_data[7]"		LOC = D8	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ7
NET	"ov_usb_data[8]"		LOC = D6	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ8
NET	"ov_usb_data[9]"		LOC = B8	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ9
NET	"ov_usb_data[10]"		LOC = C6	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ10
NET	"ov_usb_data[11]"		LOC = A7	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ11
NET	"ov_usb_data[12]"		LOC = C7	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ12
NET	"ov_usb_data[13]"		LOC = E6	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ13
NET	"ov_usb_data[14]"		LOC = C8	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ14
NET	"ov_usb_data[15]"		LOC = A11	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ15
NET	"ov_usb_data[16]"		LOC = C9	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ16
NET	"ov_usb_data[17]"		LOC = D9	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ17
NET	"ov_usb_data[18]"		LOC = A10	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ18
NET	"ov_usb_data[19]"		LOC = B10	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ19
NET	"ov_usb_data[20]"		LOC = F7	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ20
NET	"ov_usb_data[21]"		LOC = F9	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ21
NET	"ov_usb_data[22]"		LOC = C10	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ22
NET	"ov_usb_data[23]"		LOC = A12	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ23
NET	"ov_usb_data[24]"		LOC = A13	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ24
NET	"ov_usb_data[25]"		LOC = E10	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ25
NET	"ov_usb_data[26]"		LOC = B12	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ26
NET	"ov_usb_data[27]"		LOC = C11	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ27
NET	"ov_usb_data[28]"		LOC = A14	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ28
NET	"ov_usb_data[29]"		LOC = D11	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ29
NET	"ov_usb_data[30]"		LOC = E11	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ30
NET	"ov_usb_data[31]"		LOC = F10	| IOSTANDARD = "LVCMOS18"	| DRIVE = 4;	#GPIF_DQ31

NET	"i_usb_flagb_n"			LOC = C5	| IOSTANDARD = "LVCMOS18";	#GPIF_CTL5
NET	"o_usb_pktend_n"		LOC = D5	| IOSTANDARD = "LVCMOS18"	| DRIVE =4;	#GPIF_CTL7
NET	"ov_usb_fifoaddr[0]"	LOC = B5	| IOSTANDARD = "LVCMOS18"	| DRIVE =4;	#GPIF_CTL12
NET	"ov_usb_fifoaddr[1]"	LOC = E8	| IOSTANDARD = "LVCMOS18"	| DRIVE =4;	#GPIF_CTL11
NET	"o_usb_slwr_n"			LOC = C4	| IOSTANDARD = "LVCMOS18"	| DRIVE =4;	#GPIF_CTL1
NET	"o_clk_usb_pclk"		LOC = E7	| IOSTANDARD = "LVCMOS18"	| DRIVE =12;	#GPIF_CLK

##	-------------------------------------------------------------------------------------
##	---- ref SPI
##	-------------------------------------------------------------------------------------
NET	"i_usb_spi_mosi"		LOC = N12	| IOSTANDARD = "LVCMOS33"			;	#USB30_SPI_MOSI
NET	"o_usb_spi_miso"		LOC = P10	| IOSTANDARD = "LVCMOS33"			;	#USB30_SPI_MISO
NET	"i_spi_cs_n_fpga"		LOC = B3	| IOSTANDARD = "LVCMOS18"	| PULLUP;	#SPI_CS_FPGA
NET	"i_usb_spi_sck"			LOC = R11	| IOSTANDARD = "LVCMOS33"			;	#USB30_SPI_CLK
NET "i_spi_cs_n_sensor"	    LOC = F4 	| IOSTANDARD = "LVCMOS18"   | PULLUP;	#SPI_CS_SENSOR
NET "i_spi_miso_sensor"   	LOC = T4	| IOSTANDARD = "LVCMOS18"			;	#SDO
NET "o_spi_cs_n_sensor"     LOC = P11	| IOSTANDARD = "LVCMOS33"			;   #XCE
NET "o_spi_sck_sensor"      LOC = P4	| IOSTANDARD = "LVCMOS33"			;   #SCK
NET "o_spi_mosi_sensor"     LOC = M7	| IOSTANDARD = "LVCMOS33"			;   #SDI

##	-------------------------------------------------------------------------------------
##	---- ref 3014 fpga 互联
##	-------------------------------------------------------------------------------------
NET	"i_flash_hold"			LOC = P1	| IOSTANDARD = "LVCMOS18";	#FLASH_HOLD_U
NET	"o_flash_hold"			LOC = R1	| IOSTANDARD = "LVCMOS33";	#FLASH_HOLD_F
NET	"o_usb_int"				LOC = A4	| IOSTANDARD = "LVCMOS18";	#USB30_INT_L

##	-------------------------------------------------------------------------------------
##	---- ref 没有用到的引脚
##	-------------------------------------------------------------------------------------
#NET	"backup"			LOC = E3	| IOSTANDARD = "LVCMOS33";	#USB30_FPGA_GPIO
#NET	"i_usb_flaga_n"		LOC = A5	| IOSTANDARD = "LVCMOS18";	#GPIF_CTL4

##	-------------------------------------------------------------------------------------
##	-- ref gpio
##	-------------------------------------------------------------------------------------
NET	"i_optocoupler"		LOC = E1	| IOSTANDARD = "LVCMOS33";	#F_TRIGGERIN
NET	"o_optocoupler"		LOC = H3	| IOSTANDARD = "LVCMOS33"	| DRIVE = 8;	#F_OUTPUT
NET	"ov_gpio[1]"		LOC = F3	| IOSTANDARD = "LVCMOS33"	| DRIVE = 8;	#F_GPIO1_OUT
NET	"iv_gpio[1]"		LOC = C3	| IOSTANDARD = "LVCMOS33";	#F_GPIO1_IN
NET	"ov_gpio[0]"		LOC = E2	| IOSTANDARD = "LVCMOS33"	| DRIVE = 8;	#F_GPIO0_OUT
NET	"iv_gpio[0]"		LOC = F2	| IOSTANDARD = "LVCMOS33";	#F_GPIO0_IN

##	-------------------------------------------------------------------------------------
##	-- ref 测试引脚
##	测试引脚加上下拉电阻，防止天线干扰
##	-------------------------------------------------------------------------------------
NET	"o_f_led_red"	LOC = D3	| IOSTANDARD = "LVCMOS33"	| DRIVE = 8;	#F_LED_RED
NET	"o_f_led_gre"	LOC = H4	| IOSTANDARD = "LVCMOS33"	| DRIVE = 8;	#F_LED_GRE
#NET	"ov_test[3]"	LOC = R2	| IOSTANDARD = "LVCMOS33"	| DRIVE = 8	| PULLDOWN;	#TEST33
#NET	"ov_test[2]"	LOC = H1	| IOSTANDARD = "LVCMOS33"	| DRIVE = 8	| PULLDOWN;	#TEST32
#NET	"ov_test[1]"	LOC = G1	| IOSTANDARD = "LVCMOS33"	| DRIVE = 8	| PULLDOWN;	#TEST31
#NET	"ov_test[0]"	LOC = A3	| IOSTANDARD = "LVCMOS33"	| DRIVE = 8	| PULLDOWN;	#TEST30
#NET	"o_unused_pin"	LOC = M4	| IOSTANDARD = "LVCMOS33"	| DRIVE = 2	| PULLDOWN;	#NOT_DEFINE_IN_SCHEMATIC

##	-------------------------------------------------------------------------------------
##	-- ref ddr3
##	-------------------------------------------------------------------------------------
##	-------------------------------------------------------------------------------------
##	---- ref VCCAUX
##	-------------------------------------------------------------------------------------
CONFIG VCCAUX  = 3.3;
# Valid values are 2.5 and 3.3
CONFIG MCB_PERFORMANCE  = EXTENDED;

##	-------------------------------------------------------------------------------------
##	---- ref 输入阻抗
##	-------------------------------------------------------------------------------------
NET "mcb1_dram_dq[*]"	IN_TERM = NONE;
NET "mcb1_dram_dqs"		IN_TERM = NONE;
NET "mcb1_dram_dqs_n"	IN_TERM = NONE;
NET "mcb1_dram_udqs"	IN_TERM = NONE;
NET "mcb1_dram_udqs_n"	IN_TERM = NONE;

##	-------------------------------------------------------------------------------------
##	---- ref 电平、输出阻抗
##	-------------------------------------------------------------------------------------
NET "mcb1_dram_dq[*]"	IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_a[*]"	IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_ba[*]"	IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_dqs"		IOSTANDARD = DIFF_SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_udqs"	IOSTANDARD = DIFF_SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_dqs_n"	IOSTANDARD = DIFF_SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_udqs_n"	IOSTANDARD = DIFF_SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_ck"		IOSTANDARD = DIFF_SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_ck_n"	IOSTANDARD = DIFF_SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_cke"		IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_ras_n"	IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_cas_n"	IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_we_n"	IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_odt"		IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_reset_n"	IOSTANDARD = LVCMOS15	;
NET "mcb1_dram_dm"		IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_dram_udm"		IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
NET "mcb1_rzq"			IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;
#NET "mcb1_zio" IOSTANDARD = SSTL15_II	| OUT_TERM = UNTUNED_50;

##	-------------------------------------------------------------------------------------
##	---- ref 引脚分布
##	-------------------------------------------------------------------------------------
NET "mcb1_dram_a[0]"	LOC = H15;	#FDDR_A0
NET "mcb1_dram_a[1]"	LOC = H16;	#FDDR_A1
NET "mcb1_dram_a[2]"	LOC = F16;	#FDDR_A2
NET "mcb1_dram_a[3]"	LOC = H13;	#FDDR_A3
NET "mcb1_dram_a[4]"	LOC = C16;	#FDDR_A4
NET "mcb1_dram_a[5]"	LOC = J11;	#FDDR_A5
NET "mcb1_dram_a[6]"	LOC = J12;	#FDDR_A6
NET "mcb1_dram_a[7]"	LOC = F15;	#FDDR_A7
NET "mcb1_dram_a[8]"	LOC = F13;	#FDDR_A8
NET "mcb1_dram_a[9]"	LOC = F14;	#FDDR_A9
NET "mcb1_dram_a[10]"	LOC = C15;	#FDDR_A10
NET "mcb1_dram_a[11]"	LOC = G11;	#FDDR_A11
NET "mcb1_dram_a[12]"	LOC = D16;	#FDDR_A12
#NET "mcb1_dram_a[13]"	LOC = B15;	#FDDR_A13
#NET "mcb1_dram_a[14]"	LOC = B16;	#FDDR_A14

NET "mcb1_dram_ba[0]"	LOC = G14;	#FDDR_BA0
NET "mcb1_dram_ba[1]"	LOC = G16;	#FDDR_BA1
NET "mcb1_dram_ba[2]"	LOC = E16;	#FDDR_BA2

NET "mcb1_dram_cas_n"	LOC = K14;	#FDDR_CASN
NET "mcb1_dram_ck"		LOC = G12;	#FDDR_CLK0
NET "mcb1_dram_ck_n"	LOC = H11;	#FDDR_CLK0N
NET "mcb1_dram_cke"		LOC = D14;	#FDDR_CKE

NET	"mcb1_dram_dq[15]"	LOC = T12;	#FDDR_DQ9
NET	"mcb1_dram_dq[14]"	LOC = R12;	#FDDR_DQ8
NET	"mcb1_dram_dq[13]"	LOC = T13;	#FDDR_DQ12
NET	"mcb1_dram_dq[12]"	LOC = T14;	#FDDR_DQ14
NET	"mcb1_dram_dq[11]"	LOC = R16;	#FDDR_DQ11
NET	"mcb1_dram_dq[10]"	LOC = R15;	#FDDR_DQ10
NET	"mcb1_dram_dq[9]"	LOC = P16;	#FDDR_DQ15
NET	"mcb1_dram_dq[8]"	LOC = P15;	#FDDR_DQ13
NET	"mcb1_dram_dq[7]"	LOC = K16;	#FDDR_DQ7
NET	"mcb1_dram_dq[6]"	LOC = K15;	#FDDR_DQ5
NET	"mcb1_dram_dq[5]"	LOC = J16;	#FDDR_DQ6
NET	"mcb1_dram_dq[4]"	LOC = J14;	#FDDR_DQ4
NET	"mcb1_dram_dq[3]"	LOC = M16;	#FDDR_DQ1
NET	"mcb1_dram_dq[2]"	LOC = M15;	#FDDR_DQ2
NET	"mcb1_dram_dq[1]"	LOC = L16;	#FDDR_DQ3
NET	"mcb1_dram_dq[0]"	LOC = L14;	#FDDR_DQ0

NET	"mcb1_dram_udm"		LOC = K12;	#FDDR_DQM1
NET	"mcb1_dram_dm"		LOC = K11;	#FDDR_DQM0
NET	"mcb1_dram_udqs"	LOC = R14;	#FDDR_DQS1
NET	"mcb1_dram_dqs"		LOC = N14;	#FDDR_DQS0
NET	"mcb1_dram_udqs_n"	LOC = T15;	#FDDR_DQSN1
NET	"mcb1_dram_dqs_n"	LOC = N16;	#FDDR_DQSN0
NET	"mcb1_dram_reset_n"	LOC = F12;	#FDDR_RSTN
NET	"mcb1_dram_ras_n"	LOC = J13;	#FDDR_RASN
NET	"mcb1_dram_odt"		LOC = H14;	#FDDR_ODT
NET	"mcb1_dram_we_n"	LOC = E15;	#FDDR_WEN


##################################################################################
#RZQ is required for all MCB designs.   Do not move the location #
#of this pin for ES devices.For production devices, RZQ can be moved to any #
#valid package pin within the MCB bank.For designs using Calibrated Input Termination, #
#a 2R resistor should be connected between RZQand ground, where R is the desired#
#input termination value.  Otherwise, RZQ should be left as a no-connect (NC) pin.#
##################################################################################
NET	"mcb1_rzq"			LOC = L12;	#FDDR_TP
##################################################################################
#ZIO is only required for MCB designs using Calibrated Input Termination.#
#ZIO can be moved to any valid package pin (i.e. bonded IO) within the#
#MCB bank but must be left as a no-connect (NC) pin.#
##################################################################################
#NET "mcb1_zio" LOC = E13;

##	===============================================================================================
##	ref *** timing constraints***
##	===============================================================================================
##	-------------------------------------------------------------------------------------
##	-- ref clk constraint
##	-------------------------------------------------------------------------------------
NET "clk_osc" TNM_NET = "TNM_clk_osc";
TIMESPEC "TS_clk_osc" = PERIOD "TNM_clk_osc" 37.5 MHz HIGH 50 % INPUT_JITTER 200ps;

NET "data_channel_inst/deserializer_inst/deser_clk_gen_bufpll_inst/clk_bufio2" TNM_NET = "TM_clk_ser";
TIMESPEC TS_clk_ser = PERIOD "TM_clk_ser" 300 MHz HIGH 50 % INPUT_JITTER 200ps;


##	-------------------------------------------------------------------------------------
##	sensor输入接口约束
##	解串时钟定义为sensor数据频率*8
##	-------------------------------------------------------------------------------------
NET "pix_clk_p" TNM_NET = "TNM_pix_clk_p";
TIMESPEC "TS_pix_clk_p" = PERIOD "TNM_pix_clk_p" 300 MHz HIGH 50 % INPUT_JITTER 200ps;

NET "pix_clk_n" TNM_NET = "TNM_pix_clk_n";
TIMESPEC "TS_pix_clk_n" = PERIOD "TNM_pix_clk_n" 300 MHz HIGH 50 % INPUT_JITTER 200ps; 

#INST	"iv_pix_data_p<?>"		TNM = "TNM_IN_SENSOR";
#INST	"iv_pix_data_n<?>"		TNM = "TNM_IN_SENSOR";
#TIMEGRP "TNM_IN_SENSOR" OFFSET = IN 0.75 ns VALID 1.5 ns BEFORE "pix_clk_p" RISING;
#TIMEGRP "TNM_IN_SENSOR" OFFSET = IN 0.75 ns VALID 1.5 ns BEFORE "pix_clk_p" FALLING;

##	-------------------------------------------------------------------------------------
##	-- ref output constraint
##	-------------------------------------------------------------------------------------

INST "u3_if_iob_inst/usb_fifoaddr*" 	IOB=TRUE;
INST "u3_if_iob_inst/usb_slwr_n"		IOB=TRUE;
INST "u3_if_iob_inst/usb_data*" 		IOB=TRUE;
INST "u3_if_iob_inst/usb_pktend_n" 		IOB=TRUE;

#INST "u3_interface_inst/u3_transfer_inst/ov_usb_data_*" 	IOB=TRUE;
#INST "u3_interface_inst/u3_transfer_inst/usb_fifoaddr_iob_*"IOB=TRUE;
#INST "u3_interface_inst/u3_transfer_inst/o_usb_slwr_n" 		IOB=TRUE;
#INST "u3_interface_inst/u3_transfer_inst/usb_pktend_n_reg" 	IOB=TRUE;

INST "xhs_iob" 		IOB=TRUE;
INST "xtrig_n_iob" 	IOB=TRUE;

##	-------------------------------------------------------------------------------------
##	-- ref MultiPath constraint
##	-------------------------------------------------------------------------------------

##	-------------------------------------------------------------------------------------
##	定义时钟组，在FPGA中，实际用到的有这些时钟组
##	由于clk_frame_buf和clk_gpif使用同一个时钟，所以合并两时钟的约束
##	-------------------------------------------------------------------------------------
NET "clk_pix"							TNM_NET = "GRP_pix";
NET "clk_pix_2x"						TNM_NET = "GRP_pix_2x";
NET "clk_sensor"						TNM_NET = "GRP_sensor";
NET "clk_frame_buf"						TNM_NET = "GRP_frame_buf";
NET "clk_osc_bufg"						TNM_NET = "GRP_osc_bufg";
NET "w_mcb_drp_clk"						TNM_NET = "GRP_mcb_drp";
NET "data_channel_inst/clk_recover"		TNM_NET = "GRP_recover";


##	-------------------------------------------------------------------------------------
##	DCM PLL的复位信号是纯异步的
##	-------------------------------------------------------------------------------------
NET "clock_reset_inst/pwr_cnt<3>" TIG;

##	-------------------------------------------------------------------------------------
##	从 spi_slave 模块到其他的寄存器
##	-------------------------------------------------------------------------------------
##	-------------------------------------------------------------------------------------
##	从spi slave clk_sample 时钟域到 clk_pix 时钟域，主要涉及到的信号是 spi_slave 解析出来的 读写信号
##	路径延迟最大10ns，即一个 clk_gpif 的周期
##	-------------------------------------------------------------------------------------
TIMESPEC "TS_multipath1" = FROM "GRP_frame_buf" TO "GRP_pix" 10 ns DATAPATHONLY;
##	-------------------------------------------------------------------------------------
##	从spi slave clk_sample 时钟域到 clk_osc_bug 时钟域，主要涉及到的信号是 spi_slave 解析出来的 读写信号
##	路径延迟最大10ns，即一个 clk_gpif 的周期
##	-------------------------------------------------------------------------------------
TIMESPEC "TS_multipath2" = FROM "GRP_frame_buf" TO "GRP_osc_bufg" 10 ns DATAPATHONLY;
####	-------------------------------------------------------------------------------------
####	从spi slave clk_sample 时钟域到 clk_frame_buf 时钟域，主要涉及到的信号是 spi_slave 解析出来的 读写信号
####	路径延迟最大10ns，即一个 clk_gpif 的周期
####	-------------------------------------------------------------------------------------
##TIMESPEC "TS_multipath3" = FROM "GRP_frame_buf" TO "GRP_frame_buf" 10 ns DATAPATHONLY;
##	-------------------------------------------------------------------------------------
##	从spi slave clk_sample 时钟域到 clk_sensor 时钟域，主要涉及到的信号是 spi_slave 解析出来的 读写信号
##	路径延迟最大10ns，即一个 clk_gpif 的周期
##	-------------------------------------------------------------------------------------
TIMESPEC "TS_multipath4" = FROM "GRP_frame_buf" TO "GRP_sensor" 10 ns DATAPATHONLY;

##	-------------------------------------------------------------------------------------
##	从寄存器模块到 spi_slave 模块
##	-------------------------------------------------------------------------------------
##	-------------------------------------------------------------------------------------
##	从 clk_pix 时钟域到 spi slave clk_sample 时钟域，主要涉及到的信号是 clk_pix 时钟域的寄存器
##	路径延迟最大10ns，即一个 clk_gpif 的周期
##	-------------------------------------------------------------------------------------
TIMESPEC "TS_multipath5" = FROM "GRP_pix" TO "GRP_frame_buf" 10 ns DATAPATHONLY;
##	-------------------------------------------------------------------------------------
##	从 clk_osc_bug 时钟域到 spi slave clk_sample 时钟域，主要涉及到的信号是 clk_osc_bufg 时钟域的寄存器
##	路径延迟最大10ns，即一个 clk_gpif 的周期
##	-------------------------------------------------------------------------------------
TIMESPEC "TS_multipath6" = FROM "GRP_osc_bufg" TO "GRP_frame_buf" 10 ns DATAPATHONLY;
##	-------------------------------------------------------------------------------------
##	从 clk_sensor 时钟域到 spi slave clk_sample 时钟域，主要涉及到的信号是 clk_sensor 时钟域的寄存器
##	路径延迟最大10ns，即一个 clk_sensor 的周期
##	-------------------------------------------------------------------------------------
TIMESPEC "TS_multipath7" = FROM "GRP_sensor" TO "GRP_frame_buf" 10 ns DATAPATHONLY;
##	-------------------------------------------------------------------------------------
##	时间戳传递
##	-------------------------------------------------------------------------------------
##	-------------------------------------------------------------------------------------
##	fval是clk_pix时钟域的，在clk_osc_bufg中处理
##	路径延迟10ns，为的是尽快输出时间戳，让时间戳尽快传递到 clk_pix 时钟域
##	-------------------------------------------------------------------------------------
TIMESPEC "TS_multipath8" = FROM "GRP_pix" TO "GRP_osc_bufg" 10 ns DATAPATHONLY;
##	-------------------------------------------------------------------------------------
##	时间戳是clk_osc_bufg时钟域的，要传递到clk_pix时钟域
##	路径延迟10ns，为的是让时间戳尽快传递到 clk_pix 时钟域
##	-------------------------------------------------------------------------------------
TIMESPEC "TS_multipath9" = FROM "GRP_osc_bufg" TO "GRP_pix" 10 ns DATAPATHONLY;

TIMESPEC "TS_multipath10" = FROM "GRP_pix_2x" TO "GRP_frame_buf" 8.3 ns DATAPATHONLY;
TIMESPEC "TS_multipath11" = FROM "GRP_frame_buf" TO "GRP_pix_2x" 8.3 ns DATAPATHONLY;
TIMESPEC "TS_multipath12" = FROM "GRP_osc_bufg" TO "GRP_pix_2x" 8.3 ns DATAPATHONLY;

##	-------------------------------------------------------------------------------------
##	sync buffer 两边的时钟约束
##	-------------------------------------------------------------------------------------
TIMESPEC "TS_multipath13" = FROM "GRP_recover" TO "GRP_pix" 8.3 ns DATAPATHONLY;
TIMESPEC "TS_multipath14" = FROM "GRP_pix" TO "GRP_recover" 8.3 ns DATAPATHONLY;


##	-------------------------------------------------------------------------------------
##	-- ref DDR constraint
##	-------------------------------------------------------------------------------------
##################################################################################
# Timing Ignore constraints for paths crossing the clock domain
##################################################################################
NET "frame_buffer_inst/mig_core_inst/memc1_wrapper_inst/mcb_ui_top_inst/mcb_raw_wrapper_inst/selfrefresh_mcb_mode" TIG;
NET "clock_reset_inst/bufpll_mcb_lock" TIG;
INST "frame_buffer_inst/mig_core_inst/memc1_wrapper_inst/mcb_ui_top_inst/mcb_raw_wrapper_inst/gen_term_calib.mcb_soft_calibration_top_inst/mcb_soft_calibration_inst/DONE_SOFTANDHARD_CAL*" TIG;

INST "clock_reset_inst/ddr3_pll_inst/inst_pll_adv" LOC = PLL_ADV_X0Y1;
#INST "data_channel_inst/sync_buffer_inst/HiSPi_if_inst/deserializer_wrap_inst/clock_generator_inst/bufpll_inst" LOC = BUFPLL_X1Y1;
#INST "clock_reset_inst/ddr3_pll_inst/BUFPLL_MCB_inst" LOC = BUFPLL_MCB_X2Y5;